--- Running: test1.ino ---
[SUCCESS] Parsed successfully.
--- Abstract Syntax Tree ---
└── ProgramNode
    ├── VarDeclNode
    │   ├── TypeNode ("int")
    │   ├── DeclaratorNode
    │   │   └── VarNode ("myPins")
    │   └── InitializerListNode
    │       ├── NumberNode (2)
    │       ├── NumberNode (4)
    │       └── NumberNode (8)
    ├── FuncDefNode
    │   ├── TypeNode ("void")
    │   ├── DeclaratorNode
    │   │   └── VarNode ("setup")
    │   └── CompoundStmtNode
    │       └── FuncCallNode
    │           ├── VarNode ("pinMode")
    │           ├── ArrayAccessNode
    │           │   ├── VarNode ("myPins")
    │           │   └── NumberNode (1)
    │           └── VarNode ("OUTPUT")
    └── FuncDefNode
        ├── TypeNode ("void")
        ├── DeclaratorNode
        │   └── VarNode ("loop")
        └── CompoundStmtNode
--- End of AST ---

--- Starting Semantic Analysis ---
Define in scope 0: int
Define in scope 0: float
Define in scope 0: void
Define in scope 0: char
Entering global scope.
Lookup: int
Define in scope 0: myPins
Define in scope 0: setup
Entering scope for function: setup
Entering new block scope.
Lookup: pinMode
[FAILURE] SemanticError: Identifier not found: 'pinMode'

--- Running: test2.ino ---
[SUCCESS] Parsed successfully.
--- Abstract Syntax Tree ---
└── ProgramNode
    ├── FuncDefNode
    │   ├── TypeNode ("void")
    │   ├── DeclaratorNode
    │   │   └── VarNode ("setup")
    │   └── CompoundStmtNode
    │       └── FuncCallNode
    │           ├── MemberAccessNode
    │           │   ├── VarNode ("Serial")
    │           │   └── VarNode ("begin")
    │           └── NumberNode (9600)
    └── FuncDefNode
        ├── TypeNode ("void")
        ├── DeclaratorNode
        │   └── VarNode ("loop")
        └── CompoundStmtNode
            ├── FuncCallNode
            │   ├── VarNode ("digitalWrite")
            │   ├── NumberNode (13)
            │   └── VarNode ("HIGH")
            ├── FuncCallNode
            │   ├── VarNode ("delay")
            │   └── NumberNode (1000)
            ├── FuncCallNode
            │   ├── VarNode ("digitalWrite")
            │   ├── NumberNode (13)
            │   └── VarNode ("LOW")
            └── FuncCallNode
                ├── VarNode ("delay")
                └── NumberNode (1000)
--- End of AST ---

--- Starting Semantic Analysis ---
Define in scope 0: int
Define in scope 0: float
Define in scope 0: void
Define in scope 0: char
Entering global scope.
Define in scope 0: setup
Entering scope for function: setup
Entering new block scope.
Lookup: Serial
Lookup: begin
[FAILURE] SemanticError: Identifier not found: 'begin'

--- Running: test3.ino ---
[SUCCESS] Parsed successfully.
--- Abstract Syntax Tree ---
└── ProgramNode
    ├── PreprocessorNode
    ├── VarDeclNode
    │   ├── TypeNode ("const int")
    │   ├── DeclaratorNode
    │   │   └── VarNode ("ledPin")
    │   └── NumberNode (13)
    ├── VarDeclNode
    │   ├── TypeNode ("int")
    │   ├── DeclaratorNode
    │   │   └── VarNode ("counter")
    │   └── NumberNode (0)
    ├── VarDeclNode
    │   ├── TypeNode ("float")
    │   ├── DeclaratorNode
    │   │   └── VarNode ("dutyCycle")
    │   └── NumberNode (127.5)
    ├── FuncDefNode
    │   ├── TypeNode ("void")
    │   ├── DeclaratorNode
    │   │   └── VarNode ("setup")
    │   └── CompoundStmtNode
    │       └── FuncCallNode
    │           ├── VarNode ("pinMode")
    │           ├── VarNode ("ledPin")
    │           └── VarNode ("OUTPUT")
    └── FuncDefNode
        ├── TypeNode ("void")
        ├── DeclaratorNode
        │   └── VarNode ("loop")
        └── CompoundStmtNode
            ├── ForNode
            │   ├── VarDeclNode
            │   │   ├── TypeNode ("int")
            │   │   ├── DeclaratorNode
            │   │   │   └── VarNode ("i")
            │   │   └── NumberNode (0)
            │   ├── BinOpNode
            │   │   ├── VarNode ("i")
            │   │   └── NumberNode (2)
            │   ├── PostfixOpNode
            │   │   └── VarNode ("i")
            │   └── CompoundStmtNode
            │       ├── FuncCallNode
            │       │   ├── VarNode ("digitalWrite")
            │       │   ├── VarNode ("ledPin")
            │       │   └── VarNode ("HIGH")
            │       ├── FuncCallNode
            │       │   ├── VarNode ("delay")
            │       │   └── NumberNode (50)
            │       ├── FuncCallNode
            │       │   ├── VarNode ("digitalWrite")
            │       │   ├── VarNode ("ledPin")
            │       │   └── VarNode ("LOW")
            │       └── FuncCallNode
            │           ├── VarNode ("delay")
            │           └── NumberNode (50)
            ├── IfNode
            │   ├── BinOpNode
            │   │   ├── BinOpNode
            │   │   │   ├── VarNode ("counter")
            │   │   │   └── NumberNode (5)
            │   │   └── BinOpNode
            │   │       ├── VarNode ("counter")
            │   │       └── NumberNode (10)
            │   └── CompoundStmtNode
            ├── AssignNode
            │   ├── VarNode ("counter")
            │   └── NumberNode (1)
            └── FuncCallNode
                ├── VarNode ("delay")
                └── NumberNode (500)
--- End of AST ---

--- Starting Semantic Analysis ---
Define in scope 0: int
Define in scope 0: float
Define in scope 0: void
Define in scope 0: char
Entering global scope.
Lookup: const int
[FAILURE] SemanticError: Type not found: 'const int'

--- Running: test4.ino ---
[SUCCESS] Parsed successfully.
--- Abstract Syntax Tree ---
└── ProgramNode
    ├── FuncDefNode
    │   ├── TypeNode ("void")
    │   ├── DeclaratorNode
    │   │   └── VarNode ("setup")
    │   └── CompoundStmtNode
    │       ├── VarDeclNode
    │       │   ├── TypeNode ("int")
    │       │   ├── DeclaratorNode
    │       │   │   └── VarNode ("a")
    │       │   └── NumberNode (5)
    │       ├── VarDeclNode
    │       │   ├── TypeNode ("int")
    │       │   ├── DeclaratorNode
    │       │   │   └── VarNode ("b")
    │       │   └── NumberNode (10)
    │       ├── VarDeclNode
    │       │   ├── TypeNode ("int")
    │       │   ├── DeclaratorNode
    │       │   │   └── VarNode ("c")
    │       │   └── NumberNode (2)
    │       └── IfNode
    │           ├── BinOpNode
    │           │   ├── BinOpNode
    │           │   │   ├── BinOpNode
    │           │   │   │   ├── VarNode ("a")
    │           │   │   │   └── BinOpNode
    │           │   │   │       ├── VarNode ("b")
    │           │   │   │       └── VarNode ("c")
    │           │   │   └── NumberNode (10)
    │           │   └── BinOpNode
    │           │       ├── VarNode ("b")
    │           │       └── NumberNode (9)
    │           └── CompoundStmtNode
    └── FuncDefNode
        ├── TypeNode ("void")
        ├── DeclaratorNode
        │   └── VarNode ("loop")
        └── CompoundStmtNode
--- End of AST ---

--- Starting Semantic Analysis ---
Define in scope 0: int
Define in scope 0: float
Define in scope 0: void
Define in scope 0: char
Entering global scope.
Define in scope 0: setup
Entering scope for function: setup
Entering new block scope.
Lookup: int
Define in scope 2: a
Lookup: int
Define in scope 2: b
Lookup: int
Define in scope 2: c
Lookup: a
Lookup: b
Lookup: c
Lookup: b
Entering new block scope.
Leaving block scope.
Leaving block scope.
Leaving scope for function: setup
Define in scope 0: loop
Entering scope for function: loop
Entering new block scope.
Leaving block scope.
Leaving scope for function: loop
Leaving global scope.
--- Semantic Analysis Complete ---

--- Running: test5.ino ---
[SUCCESS] Parsed successfully.
--- Abstract Syntax Tree ---
└── ProgramNode
    ├── FuncDefNode
    │   ├── TypeNode ("void")
    │   ├── DeclaratorNode
    │   │   └── VarNode ("setup")
    │   └── CompoundStmtNode
    │       ├── VarDeclNode
    │       │   ├── TypeNode ("int")
    │       │   ├── DeclaratorNode
    │       │   │   └── VarNode ("a")
    │       │   └── NumberNode (5)
    │       ├── VarDeclNode
    │       │   ├── TypeNode ("int")
    │       │   ├── DeclaratorNode
    │       │   │   └── VarNode ("b")
    │       │   └── NumberNode (10)
    │       ├── VarDeclNode
    │       │   ├── TypeNode ("int")
    │       │   ├── DeclaratorNode
    │       │   │   └── VarNode ("c")
    │       │   └── NumberNode (2)
    │       └── VarDeclNode
    │           ├── TypeNode ("int")
    │           ├── DeclaratorNode
    │           │   └── VarNode ("result")
    │           └── BinOpNode
    │               ├── BinOpNode
    │               │   ├── VarNode ("a")
    │               │   └── VarNode ("b")
    │               └── VarNode ("c")
    └── FuncDefNode
        ├── TypeNode ("void")
        ├── DeclaratorNode
        │   └── VarNode ("loop")
        └── CompoundStmtNode
--- End of AST ---

--- Starting Semantic Analysis ---
Define in scope 0: int
Define in scope 0: float
Define in scope 0: void
Define in scope 0: char
Entering global scope.
Define in scope 0: setup
Entering scope for function: setup
Entering new block scope.
Lookup: int
Define in scope 2: a
Lookup: int
Define in scope 2: b
Lookup: int
Define in scope 2: c
Lookup: int
Define in scope 2: result
Lookup: a
Lookup: b
Lookup: c
Leaving block scope.
Leaving scope for function: setup
Define in scope 0: loop
Entering scope for function: loop
Entering new block scope.
Leaving block scope.
Leaving scope for function: loop
Leaving global scope.
--- Semantic Analysis Complete ---

--- Running: test6.ino ---
[SUCCESS] Parsed successfully.
--- Abstract Syntax Tree ---
└── ProgramNode
    ├── FuncDefNode
    │   ├── TypeNode ("void")
    │   ├── DeclaratorNode
    │   │   └── VarNode ("setup")
    │   └── CompoundStmtNode
    │       ├── VarDeclNode
    │       │   ├── TypeNode ("int")
    │       │   ├── DeclaratorNode
    │       │   │   └── VarNode ("x")
    │       │   └── NumberNode (10)
    │       ├── VarDeclNode
    │       │   ├── TypeNode ("int")
    │       │   ├── DeclaratorNode
    │       │   │   └── VarNode ("y")
    │       │   └── UnaryOpNode
    │       │       └── VarNode ("x")
    │       └── VarDeclNode
    │           ├── TypeNode ("int")
    │           ├── DeclaratorNode
    │           │   └── VarNode ("z")
    │           └── BinOpNode
    │               ├── NumberNode (10)
    │               └── NumberNode (5)
    └── FuncDefNode
        ├── TypeNode ("void")
        ├── DeclaratorNode
        │   └── VarNode ("loop")
        └── CompoundStmtNode
--- End of AST ---

--- Starting Semantic Analysis ---
Define in scope 0: int
Define in scope 0: float
Define in scope 0: void
Define in scope 0: char
Entering global scope.
Define in scope 0: setup
Entering scope for function: setup
Entering new block scope.
Lookup: int
Define in scope 2: x
Lookup: int
Define in scope 2: y
Lookup: x
Lookup: int
Define in scope 2: z
Leaving block scope.
Leaving scope for function: setup
Define in scope 0: loop
Entering scope for function: loop
Entering new block scope.
Leaving block scope.
Leaving scope for function: loop
Leaving global scope.
--- Semantic Analysis Complete ---

--- Running: test7.ino ---
[SUCCESS] Parsed successfully.
--- Abstract Syntax Tree ---
└── ProgramNode
    ├── FuncDefNode
    │   ├── TypeNode ("void")
    │   ├── DeclaratorNode
    │   │   └── VarNode ("setup")
    │   └── CompoundStmtNode
    │       └── VarDeclNode
    │           ├── TypeNode ("int")
    │           ├── DeclaratorNode
    │           │   └── VarNode ("x")
    │           └── NumberNode (10)
    └── FuncDefNode
        ├── TypeNode ("void")
        ├── DeclaratorNode
        │   └── VarNode ("loop")
        └── CompoundStmtNode
--- End of AST ---

--- Starting Semantic Analysis ---
Define in scope 0: int
Define in scope 0: float
Define in scope 0: void
Define in scope 0: char
Entering global scope.
Define in scope 0: setup
Entering scope for function: setup
Entering new block scope.
Lookup: int
Define in scope 2: x
Leaving block scope.
Leaving scope for function: setup
Define in scope 0: loop
Entering scope for function: loop
Entering new block scope.
Leaving block scope.
Leaving scope for function: loop
Leaving global scope.
--- Semantic Analysis Complete ---

--- Running: test8.ino ---
[SUCCESS] Parsed successfully.
--- Abstract Syntax Tree ---
└── ProgramNode
    ├── VarDeclNode
    │   ├── TypeNode ("int")
    │   ├── DeclaratorNode
    │   │   └── VarNode ("myPins")
    │   └── InitializerListNode
    │       ├── NumberNode (2)
    │       ├── NumberNode (4)
    │       └── NumberNode (8)
    ├── FuncDefNode
    │   ├── TypeNode ("int")
    │   ├── DeclaratorNode
    │   │   └── VarNode ("getIndex")
    │   └── CompoundStmtNode
    │       └── ReturnNode
    │           └── NumberNode (1)
    ├── FuncDefNode
    │   ├── TypeNode ("void")
    │   ├── DeclaratorNode
    │   │   └── VarNode ("setup")
    │   └── CompoundStmtNode
    │       ├── VarDeclNode
    │       │   ├── TypeNode ("int")
    │       │   ├── DeclaratorNode
    │       │   │   └── VarNode ("x")
    │       │   └── ArrayAccessNode
    │       │       ├── VarNode ("myPins")
    │       │       └── NumberNode (0)
    │       ├── VarDeclNode
    │       │   ├── TypeNode ("int")
    │       │   ├── DeclaratorNode
    │       │   │   └── VarNode ("y")
    │       │   └── ArrayAccessNode
    │       │       ├── VarNode ("myPins")
    │       │       └── FuncCallNode
    │       │           └── VarNode ("getIndex")
    │       ├── FuncCallNode
    │       │   ├── VarNode ("pinMode")
    │       │   ├── ArrayAccessNode
    │       │   │   ├── VarNode ("myPins")
    │       │   │   └── NumberNode (2)
    │       │   └── VarNode ("OUTPUT")
    │       └── VarDeclNode
    │           ├── TypeNode ("int")
    │           ├── DeclaratorNode
    │           │   └── VarNode ("z")
    │           └── BinOpNode
    │               ├── BinOpNode
    │               │   ├── ArrayAccessNode
    │               │   │   ├── VarNode ("myPins")
    │               │   │   └── NumberNode (0)
    │               │   └── FuncCallNode
    │               │       └── VarNode ("getIndex")
    │               └── ArrayAccessNode
    │                   ├── VarNode ("myPins")
    │                   └── NumberNode (2)
    └── FuncDefNode
        ├── TypeNode ("void")
        ├── DeclaratorNode
        │   └── VarNode ("loop")
        └── CompoundStmtNode
--- End of AST ---

--- Starting Semantic Analysis ---
Define in scope 0: int
Define in scope 0: float
Define in scope 0: void
Define in scope 0: char
Entering global scope.
Lookup: int
Define in scope 0: myPins
Define in scope 0: getIndex
Entering scope for function: getIndex
Entering new block scope.
Leaving block scope.
Leaving scope for function: getIndex
Define in scope 0: setup
Entering scope for function: setup
Entering new block scope.
Lookup: int
Define in scope 2: x
Lookup: myPins
Lookup: int
Define in scope 2: y
Lookup: myPins
Lookup: getIndex
Lookup: pinMode
[FAILURE] SemanticError: Identifier not found: 'pinMode'

--- Running: test9.ino ---
[SUCCESS] Parsed successfully.
--- Abstract Syntax Tree ---
└── ProgramNode
    ├── FuncDefNode
    │   ├── TypeNode ("int")
    │   ├── DeclaratorNode
    │   │   └── VarNode ("getValue")
    │   └── CompoundStmtNode
    │       └── ReturnNode
    │           └── NumberNode (42)
    ├── FuncDefNode
    │   ├── TypeNode ("void")
    │   ├── DeclaratorNode
    │   │   └── VarNode ("doSomething")
    │   └── CompoundStmtNode
    │       └── ReturnNode
    ├── FuncDefNode
    │   ├── TypeNode ("void")
    │   ├── DeclaratorNode
    │   │   └── VarNode ("setup")
    │   └── CompoundStmtNode
    └── FuncDefNode
        ├── TypeNode ("void")
        ├── DeclaratorNode
        │   └── VarNode ("loop")
        └── CompoundStmtNode
--- End of AST ---

--- Starting Semantic Analysis ---
Define in scope 0: int
Define in scope 0: float
Define in scope 0: void
Define in scope 0: char
Entering global scope.
Define in scope 0: getValue
Entering scope for function: getValue
Entering new block scope.
Leaving block scope.
Leaving scope for function: getValue
Define in scope 0: doSomething
Entering scope for function: doSomething
Entering new block scope.
Leaving block scope.
Leaving scope for function: doSomething
Define in scope 0: setup
Entering scope for function: setup
Entering new block scope.
Leaving block scope.
Leaving scope for function: setup
Define in scope 0: loop
Entering scope for function: loop
Entering new block scope.
Leaving block scope.
Leaving scope for function: loop
Leaving global scope.
--- Semantic Analysis Complete ---

--- Running: test10.ino ---
[SUCCESS] Parsed successfully.
--- Abstract Syntax Tree ---
└── ProgramNode
    ├── VarDeclNode
    │   ├── TypeNode ("int")
    │   ├── DeclaratorNode
    │   │   └── VarNode ("hexValue")
    │   └── NumberNode (26)
    ├── VarDeclNode
    │   ├── TypeNode ("int")
    │   ├── DeclaratorNode
    │   │   └── VarNode ("octValue")
    │   └── NumberNode (26)
    ├── VarDeclNode
    │   ├── TypeNode ("float")
    │   ├── DeclaratorNode
    │   │   └── VarNode ("sciValue")
    │   └── NumberNode (26)
    ├── FuncDefNode
    │   ├── TypeNode ("void")
    │   ├── DeclaratorNode
    │   │   └── VarNode ("setup")
    │   └── CompoundStmtNode
    └── FuncDefNode
        ├── TypeNode ("void")
        ├── DeclaratorNode
        │   └── VarNode ("loop")
        └── CompoundStmtNode
--- End of AST ---

--- Starting Semantic Analysis ---
Define in scope 0: int
Define in scope 0: float
Define in scope 0: void
Define in scope 0: char
Entering global scope.
Lookup: int
Define in scope 0: hexValue
Lookup: int
Define in scope 0: octValue
Lookup: float
Define in scope 0: sciValue
Define in scope 0: setup
Entering scope for function: setup
Entering new block scope.
Leaving block scope.
Leaving scope for function: setup
Define in scope 0: loop
Entering scope for function: loop
Entering new block scope.
Leaving block scope.
Leaving scope for function: loop
Leaving global scope.
--- Semantic Analysis Complete ---

--- Running: test11.ino ---
[SUCCESS] Parsed successfully.
--- Abstract Syntax Tree ---
└── ProgramNode
    ├── VarDeclNode
    │   ├── TypeNode ("char")
    │   ├── DeclaratorNode
    │   │   └── VarNode ("myChar")
    │   └── CharLiteralNode ("C")
    ├── FuncDefNode
    │   ├── TypeNode ("void")
    │   ├── DeclaratorNode
    │   │   └── VarNode ("setup")
    │   └── CompoundStmtNode
    └── FuncDefNode
        ├── TypeNode ("void")
        ├── DeclaratorNode
        │   └── VarNode ("loop")
        └── CompoundStmtNode
--- End of AST ---

--- Starting Semantic Analysis ---
Define in scope 0: int
Define in scope 0: float
Define in scope 0: void
Define in scope 0: char
Entering global scope.
Lookup: char
Define in scope 0: myChar
Define in scope 0: setup
Entering scope for function: setup
Entering new block scope.
Leaving block scope.
Leaving scope for function: setup
Define in scope 0: loop
Entering scope for function: loop
Entering new block scope.
Leaving block scope.
Leaving scope for function: loop
Leaving global scope.
--- Semantic Analysis Complete ---

--- Running: test12.ino ---
[SUCCESS] Parsed successfully.
--- Abstract Syntax Tree ---
└── ProgramNode
    ├── FuncDefNode
    │   ├── TypeNode ("void")
    │   ├── DeclaratorNode
    │   │   └── VarNode ("setup")
    │   └── CompoundStmtNode
    │       ├── VarDeclNode
    │       │   ├── TypeNode ("int")
    │       │   ├── DeclaratorNode
    │       │   │   └── VarNode ("x")
    │       │   └── NumberNode (5)
    │       ├── VarDeclNode
    │       │   ├── TypeNode ("int")
    │       │   ├── DeclaratorNode
    │       │   │   └── VarNode ("y")
    │       │   └── NumberNode (10)
    │       └── IfNode
    │           ├── BinOpNode
    │           │   ├── VarNode ("x")
    │           │   └── NumberNode (0)
    │           └── IfNode
    │               ├── BinOpNode
    │               │   ├── VarNode ("y")
    │               │   └── NumberNode (20)
    │               ├── FuncCallNode
    │               │   ├── VarNode ("pinMode")
    │               │   ├── NumberNode (1)
    │               │   └── VarNode ("HIGH")
    │               └── FuncCallNode
    │                   ├── VarNode ("pinMode")
    │                   ├── NumberNode (1)
    │                   └── VarNode ("LOW")
    └── FuncDefNode
        ├── TypeNode ("void")
        ├── DeclaratorNode
        │   └── VarNode ("loop")
        └── CompoundStmtNode
--- End of AST ---

--- Starting Semantic Analysis ---
Define in scope 0: int
Define in scope 0: float
Define in scope 0: void
Define in scope 0: char
Entering global scope.
Define in scope 0: setup
Entering scope for function: setup
Entering new block scope.
Lookup: int
Define in scope 2: x
Lookup: int
Define in scope 2: y
Lookup: x
Lookup: y
Lookup: pinMode
[FAILURE] SemanticError: Identifier not found: 'pinMode'

--- Running: test13.ino ---
[SUCCESS] Parsed successfully.
--- Abstract Syntax Tree ---
└── ProgramNode
    ├── FuncDefNode
    │   ├── TypeNode ("void")
    │   ├── DeclaratorNode
    │   │   └── VarNode ("setup")
    │   └── CompoundStmtNode
    │       ├── VarDeclNode
    │       │   ├── TypeNode ("int")
    │       │   ├── DeclaratorNode
    │       │   │   └── VarNode ("x")
    │       │   └── BinOpNode
    │       │       ├── NumberNode (5)
    │       │       └── NumberNode (10)
    │       └── VarDeclNode
    │           ├── TypeNode ("int")
    │           ├── DeclaratorNode
    │           │   ├── VarNode ("p")
    │           │   └── PointerNode
    │           └── UnaryOpNode
    │               └── VarNode ("x")
    └── FuncDefNode
        ├── TypeNode ("void")
        ├── DeclaratorNode
        │   └── VarNode ("loop")
        └── CompoundStmtNode
--- End of AST ---

--- Starting Semantic Analysis ---
Define in scope 0: int
Define in scope 0: float
Define in scope 0: void
Define in scope 0: char
Entering global scope.
Define in scope 0: setup
Entering scope for function: setup
Entering new block scope.
Lookup: int
Define in scope 2: x
Lookup: int
Define in scope 2: p
Lookup: x
Leaving block scope.
Leaving scope for function: setup
Define in scope 0: loop
Entering scope for function: loop
Entering new block scope.
Leaving block scope.
Leaving scope for function: loop
Leaving global scope.
--- Semantic Analysis Complete ---

--- Running: test14.ino ---
[SUCCESS] Parsed successfully.
--- Abstract Syntax Tree ---
└── ProgramNode
    ├── FuncDefNode
    │   ├── TypeNode ("void")
    │   ├── DeclaratorNode
    │   │   └── VarNode ("myInterruptService")
    │   └── CompoundStmtNode
    ├── FuncDefNode
    │   ├── TypeNode ("void")
    │   ├── DeclaratorNode
    │   │   └── VarNode ("setup")
    │   └── CompoundStmtNode
    │       └── VarDeclNode
    │           ├── TypeNode ("void")
    │           ├── DeclaratorNode
    │           │   └── DeclaratorNode
    │           │       ├── VarNode ("myFunction")
    │           │       └── PointerNode
    │           └── UnaryOpNode
    │               └── VarNode ("myInterruptService")
    └── FuncDefNode
        ├── TypeNode ("void")
        ├── DeclaratorNode
        │   └── VarNode ("loop")
        └── CompoundStmtNode
--- End of AST ---

--- Starting Semantic Analysis ---
Define in scope 0: int
Define in scope 0: float
Define in scope 0: void
Define in scope 0: char
Entering global scope.
Define in scope 0: myInterruptService
Entering scope for function: myInterruptService
Entering new block scope.
Leaving block scope.
Leaving scope for function: myInterruptService
Define in scope 0: setup
Entering scope for function: setup
Entering new block scope.
Lookup: void
Define in scope 2: undefined
Lookup: myInterruptService
Leaving block scope.
Leaving scope for function: setup
Define in scope 0: loop
Entering scope for function: loop
Entering new block scope.
Leaving block scope.
Leaving scope for function: loop
Leaving global scope.
--- Semantic Analysis Complete ---

--- Running: test15.ino ---
[SUCCESS] Parsed successfully.
--- Abstract Syntax Tree ---
└── ProgramNode
    ├── FuncDefNode
    │   ├── TypeNode ("void")
    │   ├── DeclaratorNode
    │   │   └── VarNode ("setup")
    │   └── CompoundStmtNode
    │       └── FuncCallNode
    │           ├── MemberAccessNode
    │           │   ├── VarNode ("Serial")
    │           │   └── VarNode ("begin")
    │           └── NumberNode (9600)
    └── FuncDefNode
        ├── TypeNode ("void")
        ├── DeclaratorNode
        │   └── VarNode ("loop")
        └── CompoundStmtNode
            ├── VarDeclNode
            │   ├── TypeNode ("int")
            │   ├── DeclaratorNode
            │   │   └── VarNode ("i")
            │   └── NumberNode (0)
            └── WhileNode
                ├── BinOpNode
                │   ├── VarNode ("i")
                │   └── NumberNode (3)
                └── CompoundStmtNode
                    ├── ForNode
                    │   ├── VarDeclNode
                    │   │   ├── TypeNode ("int")
                    │   │   ├── DeclaratorNode
                    │   │   │   └── VarNode ("j")
                    │   │   └── NumberNode (0)
                    │   ├── BinOpNode
                    │   │   ├── VarNode ("j")
                    │   │   └── NumberNode (3)
                    │   ├── PostfixOpNode
                    │   │   └── VarNode ("j")
                    │   └── CompoundStmtNode
                    │       ├── VarDeclNode
                    │       │   ├── TypeNode ("int")
                    │       │   ├── DeclaratorNode
                    │       │   │   └── VarNode ("k")
                    │       │   └── NumberNode (0)
                    │       └── DoWhileNode
                    │           ├── BinOpNode
                    │           │   ├── VarNode ("k")
                    │           │   └── NumberNode (2)
                    │           └── CompoundStmtNode
                    │               ├── FuncCallNode
                    │               │   ├── MemberAccessNode
                    │               │   │   ├── VarNode ("Serial")
                    │               │   │   └── VarNode ("print")
                    │               │   └── StringNode ("i: ")
                    │               ├── FuncCallNode
                    │               │   ├── MemberAccessNode
                    │               │   │   ├── VarNode ("Serial")
                    │               │   │   └── VarNode ("print")
                    │               │   └── VarNode ("i")
                    │               ├── FuncCallNode
                    │               │   ├── MemberAccessNode
                    │               │   │   ├── VarNode ("Serial")
                    │               │   │   └── VarNode ("print")
                    │               │   └── StringNode (", j: ")
                    │               ├── FuncCallNode
                    │               │   ├── MemberAccessNode
                    │               │   │   ├── VarNode ("Serial")
                    │               │   │   └── VarNode ("print")
                    │               │   └── VarNode ("j")
                    │               ├── FuncCallNode
                    │               │   ├── MemberAccessNode
                    │               │   │   ├── VarNode ("Serial")
                    │               │   │   └── VarNode ("print")
                    │               │   └── StringNode (", k: ")
                    │               ├── FuncCallNode
                    │               │   ├── MemberAccessNode
                    │               │   │   ├── VarNode ("Serial")
                    │               │   │   └── VarNode ("println")
                    │               │   └── VarNode ("k")
                    │               └── PostfixOpNode
                    │                   └── VarNode ("k")
                    └── PostfixOpNode
                        └── VarNode ("i")
--- End of AST ---

--- Starting Semantic Analysis ---
Define in scope 0: int
Define in scope 0: float
Define in scope 0: void
Define in scope 0: char
Entering global scope.
Define in scope 0: setup
Entering scope for function: setup
Entering new block scope.
Lookup: Serial
Lookup: begin
[FAILURE] SemanticError: Identifier not found: 'begin'

--- Running: test16.ino ---
[SUCCESS] Parsed successfully.
--- Abstract Syntax Tree ---
└── ProgramNode
    ├── FuncDefNode
    │   ├── TypeNode ("void")
    │   ├── DeclaratorNode
    │   │   └── VarNode ("setup")
    │   └── CompoundStmtNode
    │       └── FuncCallNode
    │           ├── MemberAccessNode
    │           │   ├── VarNode ("Serial")
    │           │   └── VarNode ("begin")
    │           └── NumberNode (9600)
    └── FuncDefNode
        ├── TypeNode ("void")
        ├── DeclaratorNode
        │   └── VarNode ("loop")
        └── CompoundStmtNode
            ├── VarDeclNode
            │   ├── TypeNode ("int")
            │   ├── DeclaratorNode
            │   │   └── VarNode ("x")
            │   └── NumberNode (5)
            ├── VarDeclNode
            │   ├── TypeNode ("int")
            │   ├── DeclaratorNode
            │   │   └── VarNode ("y")
            │   └── NumberNode (10)
            ├── VarDeclNode
            │   ├── TypeNode ("int")
            │   ├── DeclaratorNode
            │   │   └── VarNode ("z")
            │   └── NumberNode (15)
            └── IfNode
                ├── BinOpNode
                │   ├── BinOpNode
                │   │   ├── BinOpNode
                │   │   │   ├── VarNode ("x")
                │   │   │   └── VarNode ("y")
                │   │   └── BinOpNode
                │   │       ├── VarNode ("y")
                │   │       └── VarNode ("z")
                │   └── BinOpNode
                │       ├── BinOpNode
                │       │   ├── VarNode ("x")
                │       │   └── NumberNode (5)
                │       └── BinOpNode
                │           ├── VarNode ("z")
                │           └── NumberNode (10)
                ├── CompoundStmtNode
                │   └── IfNode
                │       ├── BinOpNode
                │       │   ├── BinOpNode
                │       │   │   ├── BinOpNode
                │       │   │   │   ├── VarNode ("z")
                │       │   │   │   └── VarNode ("x")
                │       │   │   └── NumberNode (2)
                │       │   └── BinOpNode
                │       │       ├── BinOpNode
                │       │       │   ├── VarNode ("y")
                │       │       │   └── NumberNode (2)
                │       │       └── NumberNode (0)
                │       ├── CompoundStmtNode
                │       │   └── FuncCallNode
                │       │       ├── MemberAccessNode
                │       │       │   ├── VarNode ("Serial")
                │       │       │   └── VarNode ("println")
                │       │       └── StringNode ("Condition 1 met.")
                │       └── CompoundStmtNode
                │           └── FuncCallNode
                │               ├── MemberAccessNode
                │               │   ├── VarNode ("Serial")
                │               │   └── VarNode ("println")
                │               └── StringNode ("Condition 2 met.")
                └── IfNode
                    ├── BinOpNode
                    │   ├── BinOpNode
                    │   │   ├── VarNode ("x")
                    │   │   └── VarNode ("y")
                    │   └── BinOpNode
                    │       ├── VarNode ("y")
                    │       └── NumberNode (10)
                    ├── CompoundStmtNode
                    │   └── FuncCallNode
                    │       ├── MemberAccessNode
                    │       │   ├── VarNode ("Serial")
                    │       │   └── VarNode ("println")
                    │       └── StringNode ("Condition 3 met.")
                    └── CompoundStmtNode
                        └── FuncCallNode
                            ├── MemberAccessNode
                            │   ├── VarNode ("Serial")
                            │   └── VarNode ("println")
                            └── StringNode ("No conditions met.")
--- End of AST ---

--- Starting Semantic Analysis ---
Define in scope 0: int
Define in scope 0: float
Define in scope 0: void
Define in scope 0: char
Entering global scope.
Define in scope 0: setup
Entering scope for function: setup
Entering new block scope.
Lookup: Serial
Lookup: begin
[FAILURE] SemanticError: Identifier not found: 'begin'

--- Running: test17.ino ---
[SUCCESS] Parsed successfully.
--- Abstract Syntax Tree ---
└── ProgramNode
    ├── FuncDefNode
    │   ├── TypeNode ("void")
    │   ├── DeclaratorNode
    │   │   └── VarNode ("setup")
    │   └── CompoundStmtNode
    │       └── FuncCallNode
    │           ├── MemberAccessNode
    │           │   ├── VarNode ("Serial")
    │           │   └── VarNode ("begin")
    │           └── NumberNode (9600)
    └── FuncDefNode
        ├── TypeNode ("void")
        ├── DeclaratorNode
        │   └── VarNode ("loop")
        └── CompoundStmtNode
            ├── VarDeclNode
            │   ├── TypeNode ("int")
            │   ├── DeclaratorNode
            │   │   └── VarNode ("a")
            │   └── NumberNode (20)
            ├── VarDeclNode
            │   ├── TypeNode ("int")
            │   ├── DeclaratorNode
            │   │   └── VarNode ("b")
            │   └── NumberNode (5)
            ├── VarDeclNode
            │   ├── TypeNode ("int")
            │   ├── DeclaratorNode
            │   │   └── VarNode ("c")
            │   └── NumberNode (2)
            ├── VarDeclNode
            │   ├── TypeNode ("int")
            │   ├── DeclaratorNode
            │   │   └── VarNode ("d")
            │   └── NumberNode (3)
            ├── VarDeclNode
            │   ├── TypeNode ("int")
            │   ├── DeclaratorNode
            │   │   └── VarNode ("result1")
            │   └── BinOpNode
            │       ├── BinOpNode
            │       │   ├── VarNode ("a")
            │       │   └── BinOpNode
            │       │       ├── VarNode ("b")
            │       │       └── VarNode ("c")
            │       └── VarNode ("d")
            ├── VarDeclNode
            │   ├── TypeNode ("int")
            │   ├── DeclaratorNode
            │   │   └── VarNode ("result2")
            │   └── BinOpNode
            │       ├── BinOpNode
            │       │   ├── BinOpNode
            │       │   │   ├── VarNode ("a")
            │       │   │   └── VarNode ("b")
            │       │   └── VarNode ("c")
            │       └── VarNode ("d")
            ├── VarDeclNode
            │   ├── TypeNode ("int")
            │   ├── DeclaratorNode
            │   │   └── VarNode ("result3")
            │   └── BinOpNode
            │       ├── BinOpNode
            │       │   ├── VarNode ("a")
            │       │   └── BinOpNode
            │       │       ├── VarNode ("b")
            │       │       └── VarNode ("d")
            │       └── VarNode ("c")
            ├── FuncCallNode
            │   ├── MemberAccessNode
            │   │   ├── VarNode ("Serial")
            │   │   └── VarNode ("print")
            │   └── StringNode ("Result 1: ")
            ├── FuncCallNode
            │   ├── MemberAccessNode
            │   │   ├── VarNode ("Serial")
            │   │   └── VarNode ("println")
            │   └── VarNode ("result1")
            ├── FuncCallNode
            │   ├── MemberAccessNode
            │   │   ├── VarNode ("Serial")
            │   │   └── VarNode ("print")
            │   └── StringNode ("Result 2: ")
            ├── FuncCallNode
            │   ├── MemberAccessNode
            │   │   ├── VarNode ("Serial")
            │   │   └── VarNode ("println")
            │   └── VarNode ("result2")
            ├── FuncCallNode
            │   ├── MemberAccessNode
            │   │   ├── VarNode ("Serial")
            │   │   └── VarNode ("print")
            │   └── StringNode ("Result 3: ")
            └── FuncCallNode
                ├── MemberAccessNode
                │   ├── VarNode ("Serial")
                │   └── VarNode ("println")
                └── VarNode ("result3")
--- End of AST ---

--- Starting Semantic Analysis ---
Define in scope 0: int
Define in scope 0: float
Define in scope 0: void
Define in scope 0: char
Entering global scope.
Define in scope 0: setup
Entering scope for function: setup
Entering new block scope.
Lookup: Serial
Lookup: begin
[FAILURE] SemanticError: Identifier not found: 'begin'

--- Running: test18.ino ---
[SUCCESS] Parsed successfully.
--- Abstract Syntax Tree ---
└── ProgramNode
    ├── FuncDefNode
    │   ├── TypeNode ("int")
    │   ├── DeclaratorNode
    │   │   ├── VarNode ("add")
    │   │   ├── ParamNode
    │   │   │   ├── TypeNode ("int")
    │   │   │   └── DeclaratorNode
    │   │   │       └── VarNode ("x")
    │   │   └── ParamNode
    │   │       ├── TypeNode ("int")
    │   │       └── DeclaratorNode
    │   │           └── VarNode ("y")
    │   ├── ParamNode
    │   │   ├── TypeNode ("int")
    │   │   └── DeclaratorNode
    │   │       └── VarNode ("x")
    │   ├── ParamNode
    │   │   ├── TypeNode ("int")
    │   │   └── DeclaratorNode
    │   │       └── VarNode ("y")
    │   └── CompoundStmtNode
    │       └── ReturnNode
    │           └── BinOpNode
    │               ├── VarNode ("x")
    │               └── VarNode ("y")
    ├── FuncDefNode
    │   ├── TypeNode ("int")
    │   ├── DeclaratorNode
    │   │   ├── VarNode ("multiply")
    │   │   ├── ParamNode
    │   │   │   ├── TypeNode ("int")
    │   │   │   └── DeclaratorNode
    │   │   │       └── VarNode ("x")
    │   │   └── ParamNode
    │   │       ├── TypeNode ("int")
    │   │       └── DeclaratorNode
    │   │           └── VarNode ("y")
    │   ├── ParamNode
    │   │   ├── TypeNode ("int")
    │   │   └── DeclaratorNode
    │   │       └── VarNode ("x")
    │   ├── ParamNode
    │   │   ├── TypeNode ("int")
    │   │   └── DeclaratorNode
    │   │       └── VarNode ("y")
    │   └── CompoundStmtNode
    │       └── ReturnNode
    │           └── BinOpNode
    │               ├── VarNode ("x")
    │               └── VarNode ("y")
    ├── FuncDefNode
    │   ├── TypeNode ("int")
    │   ├── DeclaratorNode
    │   │   ├── VarNode ("calculate")
    │   │   ├── ParamNode
    │   │   │   ├── TypeNode ("int")
    │   │   │   └── DeclaratorNode
    │   │   │       └── VarNode ("x")
    │   │   ├── ParamNode
    │   │   │   ├── TypeNode ("int")
    │   │   │   └── DeclaratorNode
    │   │   │       └── VarNode ("y")
    │   │   └── ParamNode
    │   │       ├── TypeNode ("int")
    │   │       └── DeclaratorNode
    │   │           └── VarNode ("z")
    │   ├── ParamNode
    │   │   ├── TypeNode ("int")
    │   │   └── DeclaratorNode
    │   │       └── VarNode ("x")
    │   ├── ParamNode
    │   │   ├── TypeNode ("int")
    │   │   └── DeclaratorNode
    │   │       └── VarNode ("y")
    │   ├── ParamNode
    │   │   ├── TypeNode ("int")
    │   │   └── DeclaratorNode
    │   │       └── VarNode ("z")
    │   └── CompoundStmtNode
    │       └── ReturnNode
    │           └── FuncCallNode
    │               ├── VarNode ("multiply")
    │               ├── FuncCallNode
    │               │   ├── VarNode ("add")
    │               │   ├── VarNode ("x")
    │               │   └── VarNode ("y")
    │               └── VarNode ("z")
    ├── FuncDefNode
    │   ├── TypeNode ("void")
    │   ├── DeclaratorNode
    │   │   └── VarNode ("setup")
    │   └── CompoundStmtNode
    │       └── FuncCallNode
    │           ├── MemberAccessNode
    │           │   ├── VarNode ("Serial")
    │           │   └── VarNode ("begin")
    │           └── NumberNode (9600)
    └── FuncDefNode
        ├── TypeNode ("void")
        ├── DeclaratorNode
        │   └── VarNode ("loop")
        └── CompoundStmtNode
            ├── VarDeclNode
            │   ├── TypeNode ("int")
            │   ├── DeclaratorNode
            │   │   └── VarNode ("a")
            │   └── NumberNode (5)
            ├── VarDeclNode
            │   ├── TypeNode ("int")
            │   ├── DeclaratorNode
            │   │   └── VarNode ("b")
            │   └── NumberNode (10)
            ├── VarDeclNode
            │   ├── TypeNode ("int")
            │   ├── DeclaratorNode
            │   │   └── VarNode ("c")
            │   └── NumberNode (2)
            ├── VarDeclNode
            │   ├── TypeNode ("int")
            │   ├── DeclaratorNode
            │   │   └── VarNode ("finalResult")
            │   └── FuncCallNode
            │       ├── VarNode ("calculate")
            │       ├── VarNode ("a")
            │       ├── VarNode ("b")
            │       └── VarNode ("c")
            ├── FuncCallNode
            │   ├── MemberAccessNode
            │   │   ├── VarNode ("Serial")
            │   │   └── VarNode ("print")
            │   └── StringNode ("Final result: ")
            └── FuncCallNode
                ├── MemberAccessNode
                │   ├── VarNode ("Serial")
                │   └── VarNode ("println")
                └── VarNode ("finalResult")
--- End of AST ---

--- Starting Semantic Analysis ---
Define in scope 0: int
Define in scope 0: float
Define in scope 0: void
Define in scope 0: char
Entering global scope.
Define in scope 0: add
Entering scope for function: add
Lookup: int
Define in scope 1: x
Lookup: int
Define in scope 1: y
Entering new block scope.
Lookup: x
Lookup: y
Leaving block scope.
Leaving scope for function: add
Define in scope 0: multiply
Entering scope for function: multiply
Lookup: int
Define in scope 1: x
Lookup: int
Define in scope 1: y
Entering new block scope.
Lookup: x
Lookup: y
Leaving block scope.
Leaving scope for function: multiply
Define in scope 0: calculate
Entering scope for function: calculate
Lookup: int
Define in scope 1: x
Lookup: int
Define in scope 1: y
Lookup: int
Define in scope 1: z
Entering new block scope.
Lookup: multiply
Lookup: add
Lookup: x
Lookup: y
Lookup: z
Leaving block scope.
Leaving scope for function: calculate
Define in scope 0: setup
Entering scope for function: setup
Entering new block scope.
Lookup: Serial
Lookup: begin
[FAILURE] SemanticError: Identifier not found: 'begin'

--- Running: test19.ino ---
[SUCCESS] Parsed successfully.
--- Abstract Syntax Tree ---
└── ProgramNode
    ├── FuncDefNode
    │   ├── TypeNode ("void")
    │   ├── DeclaratorNode
    │   │   └── VarNode ("setup")
    │   └── CompoundStmtNode
    │       └── FuncCallNode
    │           ├── MemberAccessNode
    │           │   ├── VarNode ("Serial")
    │           │   └── VarNode ("begin")
    │           └── NumberNode (9600)
    └── FuncDefNode
        ├── TypeNode ("void")
        ├── DeclaratorNode
        │   └── VarNode ("loop")
        └── CompoundStmtNode
            └── ForNode
                ├── VarDeclNode
                │   ├── TypeNode ("int")
                │   ├── DeclaratorNode
                │   │   └── VarNode ("i")
                │   └── NumberNode (0)
                ├── BinOpNode
                │   ├── VarNode ("i")
                │   └── NumberNode (5)
                ├── PostfixOpNode
                │   └── VarNode ("i")
                └── CompoundStmtNode
                    └── ForNode
                        ├── VarDeclNode
                        │   ├── TypeNode ("int")
                        │   ├── DeclaratorNode
                        │   │   └── VarNode ("j")
                        │   └── NumberNode (0)
                        ├── BinOpNode
                        │   ├── VarNode ("j")
                        │   └── NumberNode (5)
                        ├── PostfixOpNode
                        │   └── VarNode ("j")
                        └── CompoundStmtNode
                            ├── IfNode
                            │   ├── BinOpNode
                            │   │   ├── VarNode ("j")
                            │   │   └── NumberNode (2)
                            │   └── CompoundStmtNode
                            │       ├── FuncCallNode
                            │       │   ├── MemberAccessNode
                            │       │   │   ├── VarNode ("Serial")
                            │       │   │   └── VarNode ("println")
                            │       │   └── StringNode ("Continuing inner loop...")
                            │       └── ContinueNode
                            ├── IfNode
                            │   ├── BinOpNode
                            │   │   ├── VarNode ("i")
                            │   │   └── NumberNode (3)
                            │   └── CompoundStmtNode
                            │       ├── FuncCallNode
                            │       │   ├── MemberAccessNode
                            │       │   │   ├── VarNode ("Serial")
                            │       │   │   └── VarNode ("println")
                            │       │   └── StringNode ("Breaking outer loop...")
                            │       └── BreakNode
                            ├── FuncCallNode
                            │   ├── MemberAccessNode
                            │   │   ├── VarNode ("Serial")
                            │   │   └── VarNode ("print")
                            │   └── StringNode ("i: ")
                            ├── FuncCallNode
                            │   ├── MemberAccessNode
                            │   │   ├── VarNode ("Serial")
                            │   │   └── VarNode ("print")
                            │   └── VarNode ("i")
                            ├── FuncCallNode
                            │   ├── MemberAccessNode
                            │   │   ├── VarNode ("Serial")
                            │   │   └── VarNode ("print")
                            │   └── StringNode (", j: ")
                            └── FuncCallNode
                                ├── MemberAccessNode
                                │   ├── VarNode ("Serial")
                                │   └── VarNode ("println")
                                └── VarNode ("j")
--- End of AST ---

--- Starting Semantic Analysis ---
Define in scope 0: int
Define in scope 0: float
Define in scope 0: void
Define in scope 0: char
Entering global scope.
Define in scope 0: setup
Entering scope for function: setup
Entering new block scope.
Lookup: Serial
Lookup: begin
[FAILURE] SemanticError: Identifier not found: 'begin'

--- Running: test20.ino ---
[SUCCESS] Parsed successfully.
--- Abstract Syntax Tree ---
└── ProgramNode
    ├── FuncDefNode
    │   ├── TypeNode ("void")
    │   ├── DeclaratorNode
    │   │   └── VarNode ("setup")
    │   └── CompoundStmtNode
    │       └── FuncCallNode
    │           ├── MemberAccessNode
    │           │   ├── VarNode ("Serial")
    │           │   └── VarNode ("begin")
    │           └── NumberNode (9600)
    └── FuncDefNode
        ├── TypeNode ("void")
        ├── DeclaratorNode
        │   └── VarNode ("loop")
        └── CompoundStmtNode
            ├── VarDeclNode
            │   ├── TypeNode ("int")
            │   ├── DeclaratorNode
            │   │   └── VarNode ("a")
            │   └── NumberNode (10)
            ├── VarDeclNode
            │   ├── TypeNode ("int")
            │   ├── DeclaratorNode
            │   │   └── VarNode ("b")
            │   └── NumberNode (20)
            ├── VarDeclNode
            │   ├── TypeNode ("int")
            │   ├── DeclaratorNode
            │   │   └── VarNode ("maxVal")
            │   └── TernaryOpNode
            │       ├── BinOpNode
            │       │   ├── VarNode ("a")
            │       │   └── VarNode ("b")
            │       ├── VarNode ("a")
            │       └── VarNode ("b")
            ├── FuncCallNode
            │   ├── MemberAccessNode
            │   │   ├── VarNode ("Serial")
            │   │   └── VarNode ("print")
            │   └── StringNode ("Max value: ")
            ├── FuncCallNode
            │   ├── MemberAccessNode
            │   │   ├── VarNode ("Serial")
            │   │   └── VarNode ("println")
            │   └── VarNode ("maxVal")
            ├── VarDeclNode
            │   ├── TypeNode ("int")
            │   ├── DeclaratorNode
            │   │   └── VarNode ("c")
            │   └── NumberNode (10)
            ├── VarDeclNode
            │   ├── TypeNode ("int")
            │   ├── DeclaratorNode
            │   │   └── VarNode ("d")
            │   └── NumberNode (6)
            ├── VarDeclNode
            │   ├── TypeNode ("int")
            │   ├── DeclaratorNode
            │   │   └── VarNode ("andResult")
            │   └── BinOpNode
            │       ├── VarNode ("c")
            │       └── VarNode ("d")
            ├── VarDeclNode
            │   ├── TypeNode ("int")
            │   ├── DeclaratorNode
            │   │   └── VarNode ("orResult")
            │   └── BinOpNode
            │       ├── VarNode ("c")
            │       └── VarNode ("d")
            ├── VarDeclNode
            │   ├── TypeNode ("int")
            │   ├── DeclaratorNode
            │   │   └── VarNode ("xorResult")
            │   └── BinOpNode
            │       ├── VarNode ("c")
            │       └── VarNode ("d")
            ├── VarDeclNode
            │   ├── TypeNode ("int")
            │   ├── DeclaratorNode
            │   │   └── VarNode ("shiftResult")
            │   └── BinOpNode
            │       ├── VarNode ("c")
            │       └── NumberNode (1)
            ├── FuncCallNode
            │   ├── MemberAccessNode
            │   │   ├── VarNode ("Serial")
            │   │   └── VarNode ("print")
            │   └── StringNode ("AND result: ")
            ├── FuncCallNode
            │   ├── MemberAccessNode
            │   │   ├── VarNode ("Serial")
            │   │   └── VarNode ("println")
            │   └── VarNode ("andResult")
            ├── FuncCallNode
            │   ├── MemberAccessNode
            │   │   ├── VarNode ("Serial")
            │   │   └── VarNode ("print")
            │   └── StringNode ("OR result: ")
            ├── FuncCallNode
            │   ├── MemberAccessNode
            │   │   ├── VarNode ("Serial")
            │   │   └── VarNode ("println")
            │   └── VarNode ("orResult")
            ├── FuncCallNode
            │   ├── MemberAccessNode
            │   │   ├── VarNode ("Serial")
            │   │   └── VarNode ("print")
            │   └── StringNode ("XOR result: ")
            ├── FuncCallNode
            │   ├── MemberAccessNode
            │   │   ├── VarNode ("Serial")
            │   │   └── VarNode ("println")
            │   └── VarNode ("xorResult")
            ├── FuncCallNode
            │   ├── MemberAccessNode
            │   │   ├── VarNode ("Serial")
            │   │   └── VarNode ("print")
            │   └── StringNode ("Shift result: ")
            └── FuncCallNode
                ├── MemberAccessNode
                │   ├── VarNode ("Serial")
                │   └── VarNode ("println")
                └── VarNode ("shiftResult")
--- End of AST ---

--- Starting Semantic Analysis ---
Define in scope 0: int
Define in scope 0: float
Define in scope 0: void
Define in scope 0: char
Entering global scope.
Define in scope 0: setup
Entering scope for function: setup
Entering new block scope.
Lookup: Serial
Lookup: begin
[FAILURE] SemanticError: Identifier not found: 'begin'

--- Running: test21.ino ---
[SUCCESS] Parsed successfully.
--- Abstract Syntax Tree ---
└── ProgramNode
    ├── FuncDefNode
    │   ├── TypeNode ("void")
    │   ├── DeclaratorNode
    │   │   └── VarNode ("setup")
    │   └── CompoundStmtNode
    │       └── FuncCallNode
    │           ├── MemberAccessNode
    │           │   ├── VarNode ("Serial")
    │           │   └── VarNode ("begin")
    │           └── NumberNode (9600)
    └── FuncDefNode
        ├── TypeNode ("void")
        ├── DeclaratorNode
        │   └── VarNode ("loop")
        └── CompoundStmtNode
            ├── VarDeclNode
            │   ├── TypeNode ("float")
            │   ├── DeclaratorNode
            │   │   └── VarNode ("f1")
            │   └── NumberNode (3.14)
            ├── VarDeclNode
            │   ├── TypeNode ("float")
            │   ├── DeclaratorNode
            │   │   └── VarNode ("f2")
            │   └── NumberNode (2)
            ├── VarDeclNode
            │   ├── TypeNode ("int")
            │   ├── DeclaratorNode
            │   │   └── VarNode ("i1")
            │   └── NumberNode (5)
            ├── VarDeclNode
            │   ├── TypeNode ("float")
            │   ├── DeclaratorNode
            │   │   └── VarNode ("result1")
            │   └── BinOpNode
            │       ├── VarNode ("f1")
            │       └── VarNode ("f2")
            ├── VarDeclNode
            │   ├── TypeNode ("float")
            │   ├── DeclaratorNode
            │   │   └── VarNode ("result2")
            │   └── BinOpNode
            │       ├── BinOpNode
            │       │   ├── VarNode ("f1")
            │       │   └── VarNode ("i1")
            │       └── VarNode ("f2")
            ├── IfNode
            │   ├── BinOpNode
            │   │   ├── BinOpNode
            │   │   │   ├── VarNode ("result2")
            │   │   │   └── NumberNode (4)
            │   │   └── BinOpNode
            │   │       ├── VarNode ("i1")
            │   │       └── NumberNode (10)
            │   ├── CompoundStmtNode
            │   │   └── FuncCallNode
            │   │       ├── MemberAccessNode
            │   │       │   ├── VarNode ("Serial")
            │   │       │   └── VarNode ("println")
            │   │       └── StringNode ("Calculation is correct.")
            │   └── CompoundStmtNode
            │       └── FuncCallNode
            │           ├── MemberAccessNode
            │           │   ├── VarNode ("Serial")
            │           │   └── VarNode ("println")
            │           └── StringNode ("Calculation is incorrect.")
            ├── FuncCallNode
            │   ├── MemberAccessNode
            │   │   ├── VarNode ("Serial")
            │   │   └── VarNode ("print")
            │   └── StringNode ("Result 1: ")
            ├── FuncCallNode
            │   ├── MemberAccessNode
            │   │   ├── VarNode ("Serial")
            │   │   └── VarNode ("println")
            │   ├── VarNode ("result1")
            │   └── NumberNode (4)
            ├── FuncCallNode
            │   ├── MemberAccessNode
            │   │   ├── VarNode ("Serial")
            │   │   └── VarNode ("print")
            │   └── StringNode ("Result 2: ")
            └── FuncCallNode
                ├── MemberAccessNode
                │   ├── VarNode ("Serial")
                │   └── VarNode ("println")
                ├── VarNode ("result2")
                └── NumberNode (4)
--- End of AST ---

--- Starting Semantic Analysis ---
Define in scope 0: int
Define in scope 0: float
Define in scope 0: void
Define in scope 0: char
Entering global scope.
Define in scope 0: setup
Entering scope for function: setup
Entering new block scope.
Lookup: Serial
Lookup: begin
[FAILURE] SemanticError: Identifier not found: 'begin'

--- Running: test22.ino ---
[SUCCESS] Parsed successfully.
--- Abstract Syntax Tree ---
└── ProgramNode
    ├── FuncDefNode
    │   ├── TypeNode ("void")
    │   ├── DeclaratorNode
    │   │   └── VarNode ("setup")
    │   └── CompoundStmtNode
    │       └── FuncCallNode
    │           ├── MemberAccessNode
    │           │   ├── VarNode ("Serial")
    │           │   └── VarNode ("begin")
    │           └── NumberNode (9600)
    └── FuncDefNode
        ├── TypeNode ("void")
        ├── DeclaratorNode
        │   └── VarNode ("loop")
        └── CompoundStmtNode
            ├── VarDeclNode
            │   ├── TypeNode ("char")
            │   ├── DeclaratorNode
            │   │   └── VarNode ("myChar")
            │   └── CharLiteralNode ("A")
            ├── VarDeclNode
            │   ├── TypeNode ("char")
            │   ├── DeclaratorNode
            │   │   └── VarNode ("escapedChar")
            │   └── CharLiteralNode ("\n")
            ├── VarDeclNode
            │   ├── TypeNode ("const char")
            │   ├── DeclaratorNode
            │   │   ├── VarNode ("str1")
            │   │   └── PointerNode
            │   └── StringNode ("Hello")
            ├── VarDeclNode
            │   ├── TypeNode ("const char")
            │   ├── DeclaratorNode
            │   │   ├── VarNode ("str2")
            │   │   └── PointerNode
            │   └── StringNode (" world!")
            ├── FuncCallNode
            │   ├── MemberAccessNode
            │   │   ├── VarNode ("Serial")
            │   │   └── VarNode ("print")
            │   └── VarNode ("str1")
            ├── FuncCallNode
            │   ├── MemberAccessNode
            │   │   ├── VarNode ("Serial")
            │   │   └── VarNode ("println")
            │   └── VarNode ("str2")
            ├── FuncCallNode
            │   ├── MemberAccessNode
            │   │   ├── VarNode ("Serial")
            │   │   └── VarNode ("print")
            │   └── StringNode ("My character is: ")
            ├── FuncCallNode
            │   ├── MemberAccessNode
            │   │   ├── VarNode ("Serial")
            │   │   └── VarNode ("println")
            │   └── VarNode ("myChar")
            ├── FuncCallNode
            │   ├── MemberAccessNode
            │   │   ├── VarNode ("Serial")
            │   │   └── VarNode ("print")
            │   └── VarNode ("myChar")
            └── FuncCallNode
                ├── MemberAccessNode
                │   ├── VarNode ("Serial")
                │   └── VarNode ("print")
                └── VarNode ("escapedChar")
--- End of AST ---

--- Starting Semantic Analysis ---
Define in scope 0: int
Define in scope 0: float
Define in scope 0: void
Define in scope 0: char
Entering global scope.
Define in scope 0: setup
Entering scope for function: setup
Entering new block scope.
Lookup: Serial
Lookup: begin
[FAILURE] SemanticError: Identifier not found: 'begin'

--- Running: test23.ino ---
[SUCCESS] Parsed successfully.
--- Abstract Syntax Tree ---
└── ProgramNode
    ├── FuncDefNode
    │   ├── TypeNode ("void")
    │   ├── DeclaratorNode
    │   │   └── VarNode ("setup")
    │   └── CompoundStmtNode
    │       └── FuncCallNode
    │           ├── MemberAccessNode
    │           │   ├── VarNode ("Serial")
    │           │   └── VarNode ("begin")
    │           └── NumberNode (9600)
    └── FuncDefNode
        ├── TypeNode ("void")
        ├── DeclaratorNode
        │   └── VarNode ("loop")
        └── CompoundStmtNode
            ├── VarDeclNode
            │   ├── TypeNode ("int")
            │   ├── DeclaratorNode
            │   │   └── VarNode ("x")
            │   └── NumberNode (10)
            ├── VarDeclNode
            │   ├── TypeNode ("int")
            │   ├── DeclaratorNode
            │   │   └── VarNode ("y")
            │   └── NumberNode (20)
            ├── IfNode
            │   ├── BinOpNode
            │   │   ├── VarNode ("x")
            │   │   └── VarNode ("y")
            │   └── CompoundStmtNode
            │       └── FuncCallNode
            │           ├── MemberAccessNode
            │           │   ├── VarNode ("Serial")
            │           │   └── VarNode ("println")
            │           └── StringNode ("X is less than Y.")
            ├── VarDeclNode
            │   ├── TypeNode ("int")
            │   ├── DeclaratorNode
            │   │   └── VarNode ("i")
            │   └── NumberNode (0)
            ├── WhileNode
            │   ├── BinOpNode
            │   │   ├── VarNode ("i")
            │   │   └── NumberNode (3)
            │   └── CompoundStmtNode
            │       ├── FuncCallNode
            │       │   ├── MemberAccessNode
            │       │   │   ├── VarNode ("Serial")
            │       │   │   └── VarNode ("println")
            │       │   └── VarNode ("i")
            │       └── PostfixOpNode
            │           └── VarNode ("i")
            └── ForNode
                ├── VarDeclNode
                │   ├── TypeNode ("int")
                │   ├── DeclaratorNode
                │   │   └── VarNode ("j")
                │   └── NumberNode (0)
                ├── BinOpNode
                │   ├── VarNode ("j")
                │   └── NumberNode (2)
                ├── PostfixOpNode
                │   └── VarNode ("j")
                └── CompoundStmtNode
                    ├── FuncCallNode
                    │   ├── MemberAccessNode
                    │   │   ├── VarNode ("Serial")
                    │   │   └── VarNode ("print")
                    │   └── StringNode ("J is: ")
                    └── FuncCallNode
                        ├── MemberAccessNode
                        │   ├── VarNode ("Serial")
                        │   └── VarNode ("println")
                        └── VarNode ("j")
--- End of AST ---

--- Starting Semantic Analysis ---
Define in scope 0: int
Define in scope 0: float
Define in scope 0: void
Define in scope 0: char
Entering global scope.
Define in scope 0: setup
Entering scope for function: setup
Entering new block scope.
Lookup: Serial
Lookup: begin
[FAILURE] SemanticError: Identifier not found: 'begin'

--- Running: test24.ino ---
[SUCCESS] Parsed successfully.
--- Abstract Syntax Tree ---
└── ProgramNode
    ├── FuncDefNode
    │   ├── TypeNode ("void")
    │   ├── DeclaratorNode
    │   │   └── VarNode ("setup")
    │   └── CompoundStmtNode
    │       └── FuncCallNode
    │           ├── MemberAccessNode
    │           │   ├── VarNode ("Serial")
    │           │   └── VarNode ("begin")
    │           └── NumberNode (9600)
    └── FuncDefNode
        ├── TypeNode ("void")
        ├── DeclaratorNode
        │   └── VarNode ("loop")
        └── CompoundStmtNode
            ├── VarDeclNode
            │   ├── TypeNode ("int")
            │   ├── DeclaratorNode
            │   │   └── VarNode ("a")
            │   └── NumberNode (10)
            ├── VarDeclNode
            │   ├── TypeNode ("float")
            │   ├── DeclaratorNode
            │   │   └── VarNode ("b")
            │   └── NumberNode (3)
            ├── VarDeclNode
            │   ├── TypeNode ("float")
            │   ├── DeclaratorNode
            │   │   └── VarNode ("result1")
            │   └── CastNode
            │       ├── TypeNode ("float")
            │       └── BinOpNode
            │           ├── VarNode ("a")
            │           └── NumberNode (3)
            ├── VarDeclNode
            │   ├── TypeNode ("float")
            │   ├── DeclaratorNode
            │   │   └── VarNode ("result2")
            │   └── BinOpNode
            │       ├── VarNode ("a")
            │       └── VarNode ("b")
            ├── VarDeclNode
            │   ├── TypeNode ("float")
            │   ├── DeclaratorNode
            │   │   └── VarNode ("result3")
            │   └── BinOpNode
            │       ├── BinOpNode
            │       │   ├── CastNode
            │       │   │   ├── TypeNode ("float")
            │       │   │   └── VarNode ("a")
            │       │   └── VarNode ("b")
            │       └── NumberNode (5.5)
            ├── FuncCallNode
            │   ├── MemberAccessNode
            │   │   ├── VarNode ("Serial")
            │   │   └── VarNode ("print")
            │   └── StringNode ("Result 1 (int div, cast): ")
            ├── FuncCallNode
            │   ├── MemberAccessNode
            │   │   ├── VarNode ("Serial")
            │   │   └── VarNode ("println")
            │   ├── VarNode ("result1")
            │   └── NumberNode (4)
            ├── FuncCallNode
            │   ├── MemberAccessNode
            │   │   ├── VarNode ("Serial")
            │   │   └── VarNode ("print")
            │   └── StringNode ("Result 2 (float div): ")
            ├── FuncCallNode
            │   ├── MemberAccessNode
            │   │   ├── VarNode ("Serial")
            │   │   └── VarNode ("println")
            │   ├── VarNode ("result2")
            │   └── NumberNode (4)
            ├── FuncCallNode
            │   ├── MemberAccessNode
            │   │   ├── VarNode ("Serial")
            │   │   └── VarNode ("print")
            │   └── StringNode ("Result 3 (mixed): ")
            └── FuncCallNode
                ├── MemberAccessNode
                │   ├── VarNode ("Serial")
                │   └── VarNode ("println")
                ├── VarNode ("result3")
                └── NumberNode (4)
--- End of AST ---

--- Starting Semantic Analysis ---
Define in scope 0: int
Define in scope 0: float
Define in scope 0: void
Define in scope 0: char
Entering global scope.
Define in scope 0: setup
Entering scope for function: setup
Entering new block scope.
Lookup: Serial
Lookup: begin
[FAILURE] SemanticError: Identifier not found: 'begin'

--- Running: test25.ino ---
[SUCCESS] Parsed successfully.
--- Abstract Syntax Tree ---
└── ProgramNode
    ├── FuncDefNode
    │   ├── TypeNode ("void")
    │   ├── DeclaratorNode
    │   │   └── VarNode ("setup")
    │   └── CompoundStmtNode
    │       └── FuncCallNode
    │           ├── MemberAccessNode
    │           │   ├── VarNode ("Serial")
    │           │   └── VarNode ("begin")
    │           └── NumberNode (9600)
    └── FuncDefNode
        ├── TypeNode ("void")
        ├── DeclaratorNode
        │   └── VarNode ("loop")
        └── CompoundStmtNode
            ├── VarDeclNode
            │   ├── TypeNode ("int")
            │   ├── DeclaratorNode
            │   │   └── VarNode ("x")
            │   └── NumberNode (2)
            └── SwitchNode
                ├── VarNode ("x")
                └── CompoundStmtNode
                    ├── CaseNode
                    │   ├── NumberNode (1)
                    │   └── FuncCallNode
                    │       ├── MemberAccessNode
                    │       │   ├── VarNode ("Serial")
                    │       │   └── VarNode ("println")
                    │       └── StringNode ("Case 1")
                    ├── CaseNode
                    │   ├── NumberNode (2)
                    │   └── CompoundStmtNode
                    │       ├── VarDeclNode
                    │       │   ├── TypeNode ("int")
                    │       │   ├── DeclaratorNode
                    │       │   │   └── VarNode ("y")
                    │       │   └── NumberNode (5)
                    │       ├── FuncCallNode
                    │       │   ├── MemberAccessNode
                    │       │   │   ├── VarNode ("Serial")
                    │       │   │   └── VarNode ("println")
                    │       │   └── StringNode ("Case 2")
                    │       ├── FuncCallNode
                    │       │   ├── MemberAccessNode
                    │       │   │   ├── VarNode ("Serial")
                    │       │   │   └── VarNode ("print")
                    │       │   └── StringNode ("y is: ")
                    │       └── FuncCallNode
                    │           ├── MemberAccessNode
                    │           │   ├── VarNode ("Serial")
                    │           │   └── VarNode ("println")
                    │           └── VarNode ("y")
                    ├── CaseNode
                    │   ├── NumberNode (3)
                    │   ├── FuncCallNode
                    │   │   ├── MemberAccessNode
                    │   │   │   ├── VarNode ("Serial")
                    │   │   │   └── VarNode ("println")
                    │   │   └── StringNode ("Case 3")
                    │   └── BreakNode
                    └── DefaultNode
                        ├── FuncCallNode
                        │   ├── MemberAccessNode
                        │   │   ├── VarNode ("Serial")
                        │   │   └── VarNode ("println")
                        │   └── StringNode ("Default case")
                        └── BreakNode
--- End of AST ---

--- Starting Semantic Analysis ---
Define in scope 0: int
Define in scope 0: float
Define in scope 0: void
Define in scope 0: char
Entering global scope.
Define in scope 0: setup
Entering scope for function: setup
Entering new block scope.
Lookup: Serial
Lookup: begin
[FAILURE] SemanticError: Identifier not found: 'begin'

--- Running: test26.ino ---
[SUCCESS] Parsed successfully.
--- Abstract Syntax Tree ---
└── ProgramNode
    ├── PreprocessorNode
    ├── PreprocessorNode
    ├── FuncDefNode
    │   ├── TypeNode ("void")
    │   ├── DeclaratorNode
    │   │   └── VarNode ("setup")
    │   └── CompoundStmtNode
    │       └── FuncCallNode
    │           ├── MemberAccessNode
    │           │   ├── VarNode ("Serial")
    │           │   └── VarNode ("begin")
    │           └── NumberNode (9600)
    └── FuncDefNode
        ├── TypeNode ("void")
        ├── DeclaratorNode
        │   └── VarNode ("loop")
        └── CompoundStmtNode
            ├── PreprocessorNode
            ├── VarDeclNode
            │   ├── TypeNode ("float")
            │   ├── DeclaratorNode
            │   │   └── VarNode ("radius")
            │   └── NumberNode (5)
            ├── VarDeclNode
            │   ├── TypeNode ("float")
            │   ├── DeclaratorNode
            │   │   └── VarNode ("area")
            │   └── FuncCallNode
            │       ├── VarNode ("CIRCLE_AREA")
            │       └── VarNode ("radius")
            ├── FuncCallNode
            │   ├── MemberAccessNode
            │   │   ├── VarNode ("Serial")
            │   │   └── VarNode ("print")
            │   └── StringNode ("Area of circle: ")
            ├── FuncCallNode
            │   ├── MemberAccessNode
            │   │   ├── VarNode ("Serial")
            │   │   └── VarNode ("println")
            │   └── VarNode ("area")
            ├── PreprocessorNode
            ├── FuncCallNode
            │   ├── MemberAccessNode
            │   │   ├── VarNode ("Serial")
            │   │   └── VarNode ("println")
            │   └── StringNode ("PI is not defined.")
            └── PreprocessorNode
--- End of AST ---

--- Starting Semantic Analysis ---
Define in scope 0: int
Define in scope 0: float
Define in scope 0: void
Define in scope 0: char
Entering global scope.
Define in scope 0: setup
Entering scope for function: setup
Entering new block scope.
Lookup: Serial
Lookup: begin
[FAILURE] SemanticError: Identifier not found: 'begin'

--- Running: test27.ino ---
[SUCCESS] Parsed successfully.
--- Abstract Syntax Tree ---
└── ProgramNode
    ├── FuncDefNode
    │   ├── TypeNode ("void")
    │   ├── DeclaratorNode
    │   │   └── VarNode ("setup")
    │   └── CompoundStmtNode
    │       └── FuncCallNode
    │           ├── MemberAccessNode
    │           │   ├── VarNode ("Serial")
    │           │   └── VarNode ("begin")
    │           └── NumberNode (9600)
    └── FuncDefNode
        ├── TypeNode ("void")
        ├── DeclaratorNode
        │   └── VarNode ("loop")
        └── CompoundStmtNode
            ├── VarDeclNode
            │   ├── TypeNode ("int")
            │   ├── DeclaratorNode
            │   │   ├── VarNode ("arr")
            │   │   └── NumberNode (5)
            │   └── InitializerListNode
            │       ├── NumberNode (10)
            │       ├── NumberNode (20)
            │       ├── NumberNode (30)
            │       ├── NumberNode (40)
            │       └── NumberNode (50)
            ├── VarDeclNode
            │   ├── TypeNode ("int")
            │   ├── DeclaratorNode
            │   │   ├── VarNode ("matrix")
            │   │   ├── NumberNode (2)
            │   │   └── NumberNode (3)
            │   └── InitializerListNode
            │       ├── InitializerListNode
            │       │   ├── NumberNode (1)
            │       │   ├── NumberNode (2)
            │       │   └── NumberNode (3)
            │       └── InitializerListNode
            │           ├── NumberNode (4)
            │           ├── NumberNode (5)
            │           └── NumberNode (6)
            ├── VarDeclNode
            │   ├── TypeNode ("int")
            │   ├── DeclaratorNode
            │   │   └── VarNode ("i")
            │   └── NumberNode (2)
            ├── VarDeclNode
            │   ├── TypeNode ("int")
            │   ├── DeclaratorNode
            │   │   └── VarNode ("j")
            │   └── NumberNode (1)
            ├── VarDeclNode
            │   ├── TypeNode ("int")
            │   ├── DeclaratorNode
            │   │   └── VarNode ("k")
            │   └── NumberNode (1)
            ├── VarDeclNode
            │   ├── TypeNode ("int")
            │   ├── DeclaratorNode
            │   │   └── VarNode ("val1")
            │   └── ArrayAccessNode
            │       ├── VarNode ("arr")
            │       └── BinOpNode
            │           ├── BinOpNode
            │           │   ├── VarNode ("i")
            │           │   └── NumberNode (2)
            │           └── NumberNode (1)
            ├── VarDeclNode
            │   ├── TypeNode ("int")
            │   ├── DeclaratorNode
            │   │   └── VarNode ("val2")
            │   └── ArrayAccessNode
            │       ├── ArrayAccessNode
            │       │   ├── VarNode ("matrix")
            │       │   └── VarNode ("j")
            │       └── VarNode ("k")
            ├── FuncCallNode
            │   ├── MemberAccessNode
            │   │   ├── VarNode ("Serial")
            │   │   └── VarNode ("print")
            │   └── StringNode ("Val 1: ")
            ├── FuncCallNode
            │   ├── MemberAccessNode
            │   │   ├── VarNode ("Serial")
            │   │   └── VarNode ("println")
            │   └── VarNode ("val1")
            ├── FuncCallNode
            │   ├── MemberAccessNode
            │   │   ├── VarNode ("Serial")
            │   │   └── VarNode ("print")
            │   └── StringNode ("Val 2: ")
            └── FuncCallNode
                ├── MemberAccessNode
                │   ├── VarNode ("Serial")
                │   └── VarNode ("println")
                └── VarNode ("val2")
--- End of AST ---

--- Starting Semantic Analysis ---
Define in scope 0: int
Define in scope 0: float
Define in scope 0: void
Define in scope 0: char
Entering global scope.
Define in scope 0: setup
Entering scope for function: setup
Entering new block scope.
Lookup: Serial
Lookup: begin
[FAILURE] SemanticError: Identifier not found: 'begin'

--- Running: test28.ino ---
[SUCCESS] Parsed successfully.
--- Abstract Syntax Tree ---
└── ProgramNode
    ├── FuncDefNode
    │   ├── TypeNode ("int")
    │   ├── DeclaratorNode
    │   │   ├── VarNode ("myFunc")
    │   │   ├── ParamNode
    │   │   │   ├── TypeNode ("int")
    │   │   │   └── DeclaratorNode
    │   │   │       └── VarNode ("a")
    │   │   └── ParamNode
    │   │       ├── TypeNode ("int")
    │   │       └── DeclaratorNode
    │   │           └── VarNode ("b")
    │   ├── ParamNode
    │   │   ├── TypeNode ("int")
    │   │   └── DeclaratorNode
    │   │       └── VarNode ("a")
    │   ├── ParamNode
    │   │   ├── TypeNode ("int")
    │   │   └── DeclaratorNode
    │   │       └── VarNode ("b")
    │   └── CompoundStmtNode
    │       └── ReturnNode
    │           └── BinOpNode
    │               ├── VarNode ("a")
    │               └── VarNode ("b")
    ├── FuncDefNode
    │   ├── TypeNode ("void")
    │   ├── DeclaratorNode
    │   │   ├── VarNode ("callFunc")
    │   │   └── ParamNode
    │   │       ├── TypeNode ("int")
    │   │       └── DeclaratorNode
    │   │           ├── DeclaratorNode
    │   │           │   ├── VarNode ("funcPtr")
    │   │           │   └── PointerNode
    │   │           ├── ParamNode
    │   │           │   ├── TypeNode ("int")
    │   │           │   └── DeclaratorNode
    │   │           │       └── NoOpNode
    │   │           └── ParamNode
    │   │               ├── TypeNode ("int")
    │   │               └── DeclaratorNode
    │   │                   └── NoOpNode
    │   ├── ParamNode
    │   │   ├── TypeNode ("int")
    │   │   └── DeclaratorNode
    │   │       ├── DeclaratorNode
    │   │       │   ├── VarNode ("funcPtr")
    │   │       │   └── PointerNode
    │   │       ├── ParamNode
    │   │       │   ├── TypeNode ("int")
    │   │       │   └── DeclaratorNode
    │   │       │       └── NoOpNode
    │   │       └── ParamNode
    │   │           ├── TypeNode ("int")
    │   │           └── DeclaratorNode
    │   │               └── NoOpNode
    │   └── CompoundStmtNode
    │       ├── FuncCallNode
    │       │   ├── MemberAccessNode
    │       │   │   ├── VarNode ("Serial")
    │       │   │   └── VarNode ("print")
    │       │   └── StringNode ("Result: ")
    │       └── FuncCallNode
    │           ├── MemberAccessNode
    │           │   ├── VarNode ("Serial")
    │           │   └── VarNode ("println")
    │           └── FuncCallNode
    │               ├── VarNode ("funcPtr")
    │               ├── NumberNode (10)
    │               └── NumberNode (20)
    ├── FuncDefNode
    │   ├── TypeNode ("void")
    │   ├── DeclaratorNode
    │   │   └── VarNode ("setup")
    │   └── CompoundStmtNode
    │       └── FuncCallNode
    │           ├── MemberAccessNode
    │           │   ├── VarNode ("Serial")
    │           │   └── VarNode ("begin")
    │           └── NumberNode (9600)
    └── FuncDefNode
        ├── TypeNode ("void")
        ├── DeclaratorNode
        │   └── VarNode ("loop")
        └── CompoundStmtNode
            ├── FuncDefNode
            │   ├── TypeNode ("int")
            │   ├── DeclaratorNode
            │   │   ├── DeclaratorNode
            │   │   │   ├── VarNode ("ptr")
            │   │   │   └── PointerNode
            │   │   ├── ParamNode
            │   │   │   ├── TypeNode ("int")
            │   │   │   └── DeclaratorNode
            │   │   │       └── NoOpNode
            │   │   └── ParamNode
            │   │       ├── TypeNode ("int")
            │   │       └── DeclaratorNode
            │   │           └── NoOpNode
            │   ├── ParamNode
            │   │   ├── TypeNode ("int")
            │   │   └── DeclaratorNode
            │   │       └── NoOpNode
            │   └── ParamNode
            │       ├── TypeNode ("int")
            │       └── DeclaratorNode
            │           └── NoOpNode
            ├── VarDeclNode
            │   ├── TypeNode ("ptr")
            │   ├── DeclaratorNode
            │   │   └── NoOpNode
            │   └── UnaryOpNode
            │       └── VarNode ("myFunc")
            └── VarDeclNode
                ├── TypeNode ("callFunc")
                └── DeclaratorNode
                    └── DeclaratorNode
                        └── VarNode ("ptr")
--- End of AST ---

--- Starting Semantic Analysis ---
Define in scope 0: int
Define in scope 0: float
Define in scope 0: void
Define in scope 0: char
Entering global scope.
Define in scope 0: myFunc
Entering scope for function: myFunc
Lookup: int
Define in scope 1: a
Lookup: int
Define in scope 1: b
Entering new block scope.
Lookup: a
Lookup: b
Leaving block scope.
Leaving scope for function: myFunc
Define in scope 0: callFunc
Entering scope for function: callFunc
Lookup: int
Define in scope 1: funcPtr
Entering new block scope.
Lookup: Serial
Lookup: print
[FAILURE] SemanticError: Identifier not found: 'print'

--- Running: test29.ino ---
[SUCCESS] Parsed successfully.
--- Abstract Syntax Tree ---
└── ProgramNode
    ├── FuncDefNode
    │   ├── TypeNode ("void")
    │   ├── DeclaratorNode
    │   │   └── VarNode ("setup")
    │   └── CompoundStmtNode
    │       └── FuncCallNode
    │           ├── MemberAccessNode
    │           │   ├── VarNode ("Serial")
    │           │   └── VarNode ("begin")
    │           └── NumberNode (9600)
    └── FuncDefNode
        ├── TypeNode ("void")
        ├── DeclaratorNode
        │   └── VarNode ("loop")
        └── CompoundStmtNode
            ├── VarDeclNode
            │   ├── TypeNode ("int")
            │   └── DeclaratorNode
            │       └── VarNode ("a")
            ├── VarDeclNode
            │   ├── TypeNode ("a")
            │   ├── DeclaratorNode
            │   │   └── NoOpNode
            │   └── AssignNode
            │       ├── VarNode ("b")
            │       └── AssignNode
            │           ├── VarNode ("c")
            │           └── NumberNode (5)
            ├── VarDeclNode
            │   ├── TypeNode ("int")
            │   ├── DeclaratorNode
            │   │   └── VarNode ("x")
            │   └── NumberNode (10)
            ├── VarDeclNode
            │   ├── TypeNode ("int")
            │   ├── DeclaratorNode
            │   │   └── VarNode ("y")
            │   └── UnaryOpNode
            │       └── VarNode ("x")
            ├── VarDeclNode
            │   ├── TypeNode ("int")
            │   ├── DeclaratorNode
            │   │   └── VarNode ("z")
            │   └── PostfixOpNode
            │       └── VarNode ("y")
            ├── FuncCallNode
            │   ├── MemberAccessNode
            │   │   ├── VarNode ("Serial")
            │   │   └── VarNode ("print")
            │   └── StringNode ("a: ")
            ├── FuncCallNode
            │   ├── MemberAccessNode
            │   │   ├── VarNode ("Serial")
            │   │   └── VarNode ("println")
            │   └── VarNode ("a")
            ├── FuncCallNode
            │   ├── MemberAccessNode
            │   │   ├── VarNode ("Serial")
            │   │   └── VarNode ("print")
            │   └── StringNode ("x: ")
            ├── FuncCallNode
            │   ├── MemberAccessNode
            │   │   ├── VarNode ("Serial")
            │   │   └── VarNode ("println")
            │   └── VarNode ("x")
            ├── FuncCallNode
            │   ├── MemberAccessNode
            │   │   ├── VarNode ("Serial")
            │   │   └── VarNode ("print")
            │   └── StringNode ("y: ")
            ├── FuncCallNode
            │   ├── MemberAccessNode
            │   │   ├── VarNode ("Serial")
            │   │   └── VarNode ("println")
            │   └── VarNode ("y")
            ├── FuncCallNode
            │   ├── MemberAccessNode
            │   │   ├── VarNode ("Serial")
            │   │   └── VarNode ("print")
            │   └── StringNode ("z: ")
            ├── FuncCallNode
            │   ├── MemberAccessNode
            │   │   ├── VarNode ("Serial")
            │   │   └── VarNode ("println")
            │   └── VarNode ("z")
            ├── VarDeclNode
            │   ├── TypeNode ("int")
            │   ├── DeclaratorNode
            │   │   └── VarNode ("result")
            │   └── BinOpNode
            │       ├── UnaryOpNode
            │       │   └── VarNode ("x")
            │       └── PostfixOpNode
            │           └── VarNode ("y")
            ├── FuncCallNode
            │   ├── MemberAccessNode
            │   │   ├── VarNode ("Serial")
            │   │   └── VarNode ("print")
            │   └── StringNode ("Final result: ")
            └── FuncCallNode
                ├── MemberAccessNode
                │   ├── VarNode ("Serial")
                │   └── VarNode ("println")
                └── VarNode ("result")
--- End of AST ---

--- Starting Semantic Analysis ---
Define in scope 0: int
Define in scope 0: float
Define in scope 0: void
Define in scope 0: char
Entering global scope.
Define in scope 0: setup
Entering scope for function: setup
Entering new block scope.
Lookup: Serial
Lookup: begin
[FAILURE] SemanticError: Identifier not found: 'begin'

--- Running: test30.ino ---
[SUCCESS] Parsed successfully.
--- Abstract Syntax Tree ---
└── ProgramNode
    ├── FuncDefNode
    │   ├── TypeNode ("void")
    │   ├── DeclaratorNode
    │   │   └── VarNode ("setup")
    │   └── CompoundStmtNode
    │       └── FuncCallNode
    │           ├── MemberAccessNode
    │           │   ├── VarNode ("Serial")
    │           │   └── VarNode ("begin")
    │           └── NumberNode (9600)
    └── FuncDefNode
        ├── TypeNode ("void")
        ├── DeclaratorNode
        │   └── VarNode ("loop")
        └── CompoundStmtNode
            ├── VarDeclNode
            │   ├── TypeNode ("int")
            │   ├── DeclaratorNode
            │   │   └── VarNode ("i")
            │   └── NumberNode (0)
            ├── VarDeclNode
            │   ├── TypeNode ("int")
            │   ├── DeclaratorNode
            │   │   └── VarNode ("j")
            │   └── NumberNode (10)
            └── ForNode
                ├── VarDeclNode
                │   ├── TypeNode ("i")
                │   ├── DeclaratorNode
                │   │   └── NoOpNode
                │   └── NumberNode (0)
                ├── BinOpNode
                │   ├── VarNode ("i")
                │   └── VarNode ("j")
                ├── BinOpNode
                │   ├── PostfixOpNode
                │   │   └── VarNode ("i")
                │   └── PostfixOpNode
                │       └── VarNode ("j")
                └── CompoundStmtNode
                    ├── FuncCallNode
                    │   ├── MemberAccessNode
                    │   │   ├── VarNode ("Serial")
                    │   │   └── VarNode ("print")
                    │   └── StringNode ("i: ")
                    ├── FuncCallNode
                    │   ├── MemberAccessNode
                    │   │   ├── VarNode ("Serial")
                    │   │   └── VarNode ("print")
                    │   └── VarNode ("i")
                    ├── FuncCallNode
                    │   ├── MemberAccessNode
                    │   │   ├── VarNode ("Serial")
                    │   │   └── VarNode ("print")
                    │   └── StringNode (", j: ")
                    └── FuncCallNode
                        ├── MemberAccessNode
                        │   ├── VarNode ("Serial")
                        │   └── VarNode ("println")
                        └── VarNode ("j")
--- End of AST ---

--- Starting Semantic Analysis ---
Define in scope 0: int
Define in scope 0: float
Define in scope 0: void
Define in scope 0: char
Entering global scope.
Define in scope 0: setup
Entering scope for function: setup
Entering new block scope.
Lookup: Serial
Lookup: begin
[FAILURE] SemanticError: Identifier not found: 'begin'

--- Running: test31.ino ---
[SUCCESS] Parsed successfully.
--- Abstract Syntax Tree ---
└── ProgramNode
    ├── FuncDefNode
    │   ├── TypeNode ("bool")
    │   ├── DeclaratorNode
    │   │   ├── VarNode ("checkCondition")
    │   │   └── ParamNode
    │   │       ├── TypeNode ("int")
    │   │       └── DeclaratorNode
    │   │           └── VarNode ("val")
    │   ├── ParamNode
    │   │   ├── TypeNode ("int")
    │   │   └── DeclaratorNode
    │   │       └── VarNode ("val")
    │   └── CompoundStmtNode
    │       └── ReturnNode
    │           └── BinOpNode
    │               ├── BinOpNode
    │               │   ├── VarNode ("val")
    │               │   └── NumberNode (2)
    │               └── NumberNode (0)
    ├── FuncDefNode
    │   ├── TypeNode ("void")
    │   ├── DeclaratorNode
    │   │   └── VarNode ("setup")
    │   └── CompoundStmtNode
    │       └── FuncCallNode
    │           ├── MemberAccessNode
    │           │   ├── VarNode ("Serial")
    │           │   └── VarNode ("begin")
    │           └── NumberNode (9600)
    └── FuncDefNode
        ├── TypeNode ("void")
        ├── DeclaratorNode
        │   └── VarNode ("loop")
        └── CompoundStmtNode
            ├── VarDeclNode
            │   ├── TypeNode ("int")
            │   ├── DeclaratorNode
            │   │   └── VarNode ("count")
            │   └── NumberNode (0)
            ├── VarDeclNode
            │   ├── TypeNode ("int")
            │   ├── DeclaratorNode
            │   │   └── VarNode ("val")
            │   └── NumberNode (10)
            └── DoWhileNode
                ├── BinOpNode
                │   ├── BinOpNode
                │   │   ├── VarNode ("count")
                │   │   └── NumberNode (5)
                │   └── BinOpNode
                │       ├── FuncCallNode
                │       │   ├── VarNode ("checkCondition")
                │       │   └── VarNode ("val")
                │       └── VarNode ("false")
                └── CompoundStmtNode
                    ├── PostfixOpNode
                    │   └── VarNode ("count")
                    ├── PostfixOpNode
                    │   └── VarNode ("val")
                    ├── FuncCallNode
                    │   ├── MemberAccessNode
                    │   │   ├── VarNode ("Serial")
                    │   │   └── VarNode ("print")
                    │   └── StringNode ("Count: ")
                    └── FuncCallNode
                        ├── MemberAccessNode
                        │   ├── VarNode ("Serial")
                        │   └── VarNode ("println")
                        └── VarNode ("count")
--- End of AST ---

--- Starting Semantic Analysis ---
Define in scope 0: int
Define in scope 0: float
Define in scope 0: void
Define in scope 0: char
Entering global scope.
Define in scope 0: checkCondition
Entering scope for function: checkCondition
Lookup: int
Define in scope 1: val
Entering new block scope.
Lookup: val
Leaving block scope.
Leaving scope for function: checkCondition
Define in scope 0: setup
Entering scope for function: setup
Entering new block scope.
Lookup: Serial
Lookup: begin
[FAILURE] SemanticError: Identifier not found: 'begin'

--- Running: test32.ino ---
[SUCCESS] Parsed successfully.
--- Abstract Syntax Tree ---
└── ProgramNode
    ├── StructDefNode
    │   └── StructDefNode
    │       ├── VarDeclNode
    │       │   ├── TypeNode ("int")
    │       │   └── DeclaratorNode
    │       │       └── VarNode ("x")
    │       └── VarDeclNode
    │           ├── TypeNode ("int")
    │           └── DeclaratorNode
    │               └── VarNode ("y")
    ├── FuncDefNode
    │   ├── TypeNode ("void")
    │   ├── DeclaratorNode
    │   │   └── VarNode ("setup")
    │   └── CompoundStmtNode
    │       └── FuncCallNode
    │           ├── MemberAccessNode
    │           │   ├── VarNode ("Serial")
    │           │   └── VarNode ("begin")
    │           └── NumberNode (9600)
    └── FuncDefNode
        ├── TypeNode ("void")
        ├── DeclaratorNode
        │   └── VarNode ("loop")
        └── CompoundStmtNode
            ├── VarDeclNode
            │   ├── TypeNode ("struct Point")
            │   └── DeclaratorNode
            │       └── VarNode ("p1")
            ├── AssignNode
            │   ├── MemberAccessNode
            │   │   ├── VarNode ("p1")
            │   │   └── VarNode ("x")
            │   └── NumberNode (10)
            ├── AssignNode
            │   ├── MemberAccessNode
            │   │   ├── VarNode ("p1")
            │   │   └── VarNode ("y")
            │   └── NumberNode (20)
            ├── FuncCallNode
            │   ├── MemberAccessNode
            │   │   ├── VarNode ("Serial")
            │   │   └── VarNode ("print")
            │   └── StringNode ("Point x: ")
            ├── FuncCallNode
            │   ├── MemberAccessNode
            │   │   ├── VarNode ("Serial")
            │   │   └── VarNode ("println")
            │   └── MemberAccessNode
            │       ├── VarNode ("p1")
            │       └── VarNode ("x")
            ├── FuncCallNode
            │   ├── MemberAccessNode
            │   │   ├── VarNode ("Serial")
            │   │   └── VarNode ("print")
            │   └── StringNode ("Point y: ")
            └── FuncCallNode
                ├── MemberAccessNode
                │   ├── VarNode ("Serial")
                │   └── VarNode ("println")
                └── MemberAccessNode
                    ├── VarNode ("p1")
                    └── VarNode ("y")
--- End of AST ---

--- Starting Semantic Analysis ---
Define in scope 0: int
Define in scope 0: float
Define in scope 0: void
Define in scope 0: char
Entering global scope.
[FAILURE] TypeError: node.members.forEach is not a function

--- Running: test33.ino ---
[SUCCESS] Parsed successfully.
--- Abstract Syntax Tree ---
└── ProgramNode
    ├── FuncDefNode
    │   ├── TypeNode ("void")
    │   ├── DeclaratorNode
    │   │   └── VarNode ("setup")
    │   └── CompoundStmtNode
    │       └── FuncCallNode
    │           ├── MemberAccessNode
    │           │   ├── VarNode ("Serial")
    │           │   └── VarNode ("begin")
    │           └── NumberNode (9600)
    └── FuncDefNode
        ├── TypeNode ("void")
        ├── DeclaratorNode
        │   └── VarNode ("loop")
        └── CompoundStmtNode
            ├── VarDeclNode
            │   ├── TypeNode ("int")
            │   ├── DeclaratorNode
            │   │   └── VarNode ("a")
            │   └── NumberNode (5)
            ├── VarDeclNode
            │   ├── TypeNode ("int")
            │   ├── DeclaratorNode
            │   │   └── VarNode ("b")
            │   └── UnaryOpNode
            │       └── NumberNode (10)
            ├── VarDeclNode
            │   ├── TypeNode ("int")
            │   ├── DeclaratorNode
            │   │   └── VarNode ("result1")
            │   └── BinOpNode
            │       ├── VarNode ("a")
            │       └── UnaryOpNode
            │           └── VarNode ("b")
            ├── VarDeclNode
            │   ├── TypeNode ("int")
            │   ├── DeclaratorNode
            │   │   └── VarNode ("result2")
            │   └── BinOpNode
            │       ├── UnaryOpNode
            │       │   └── VarNode ("a")
            │       └── VarNode ("b")
            ├── VarDeclNode
            │   ├── TypeNode ("int")
            │   ├── DeclaratorNode
            │   │   └── VarNode ("result3")
            │   └── BinOpNode
            │       ├── NumberNode (10)
            │       └── UnaryOpNode
            │           └── VarNode ("a")
            ├── FuncCallNode
            │   ├── MemberAccessNode
            │   │   ├── VarNode ("Serial")
            │   │   └── VarNode ("print")
            │   └── StringNode ("Result 1: ")
            ├── FuncCallNode
            │   ├── MemberAccessNode
            │   │   ├── VarNode ("Serial")
            │   │   └── VarNode ("println")
            │   └── VarNode ("result1")
            ├── FuncCallNode
            │   ├── MemberAccessNode
            │   │   ├── VarNode ("Serial")
            │   │   └── VarNode ("print")
            │   └── StringNode ("Result 2: ")
            ├── FuncCallNode
            │   ├── MemberAccessNode
            │   │   ├── VarNode ("Serial")
            │   │   └── VarNode ("println")
            │   └── VarNode ("result2")
            ├── FuncCallNode
            │   ├── MemberAccessNode
            │   │   ├── VarNode ("Serial")
            │   │   └── VarNode ("print")
            │   └── StringNode ("Result 3: ")
            └── FuncCallNode
                ├── MemberAccessNode
                │   ├── VarNode ("Serial")
                │   └── VarNode ("println")
                └── VarNode ("result3")
--- End of AST ---

--- Starting Semantic Analysis ---
Define in scope 0: int
Define in scope 0: float
Define in scope 0: void
Define in scope 0: char
Entering global scope.
Define in scope 0: setup
Entering scope for function: setup
Entering new block scope.
Lookup: Serial
Lookup: begin
[FAILURE] SemanticError: Identifier not found: 'begin'

--- Running: test34.ino ---
[SUCCESS] Parsed successfully.
--- Abstract Syntax Tree ---
└── ProgramNode
    ├── FuncDefNode
    │   ├── TypeNode ("void")
    │   ├── DeclaratorNode
    │   │   └── VarNode ("setup")
    │   └── CompoundStmtNode
    │       └── FuncCallNode
    │           ├── MemberAccessNode
    │           │   ├── VarNode ("Serial")
    │           │   └── VarNode ("begin")
    │           └── NumberNode (9600)
    └── FuncDefNode
        ├── TypeNode ("void")
        ├── DeclaratorNode
        │   └── VarNode ("loop")
        └── CompoundStmtNode
            ├── VarDeclNode
            │   ├── TypeNode ("int")
            │   ├── DeclaratorNode
            │   │   └── VarNode ("i")
            │   └── NumberNode (0)
            ├── WhileNode
            │   ├── BinOpNode
            │   │   ├── VarNode ("i")
            │   │   └── NumberNode (5)
            │   └── CompoundStmtNode
            │       └── PostfixOpNode
            │           └── VarNode ("i")
            ├── NoOpNode
            ├── ForNode
            │   ├── VarDeclNode
            │   │   ├── TypeNode ("int")
            │   │   ├── DeclaratorNode
            │   │   │   └── VarNode ("j")
            │   │   └── NumberNode (0)
            │   ├── BinOpNode
            │   │   ├── VarNode ("j")
            │   │   └── NumberNode (5)
            │   ├── PostfixOpNode
            │   │   └── VarNode ("j")
            │   └── NoOpNode
            ├── IfNode
            │   ├── BinOpNode
            │   │   ├── NumberNode (1)
            │   │   └── NumberNode (1)
            │   └── CompoundStmtNode
            └── FuncCallNode
                ├── MemberAccessNode
                │   ├── VarNode ("Serial")
                │   └── VarNode ("println")
                └── StringNode ("Execution finished.")
--- End of AST ---

--- Starting Semantic Analysis ---
Define in scope 0: int
Define in scope 0: float
Define in scope 0: void
Define in scope 0: char
Entering global scope.
Define in scope 0: setup
Entering scope for function: setup
Entering new block scope.
Lookup: Serial
Lookup: begin
[FAILURE] SemanticError: Identifier not found: 'begin'

--- Running: test35.ino ---
[SUCCESS] Parsed successfully.
--- Abstract Syntax Tree ---
└── ProgramNode
    ├── FuncDefNode
    │   ├── TypeNode ("void")
    │   ├── DeclaratorNode
    │   │   └── VarNode ("setup")
    │   └── CompoundStmtNode
    │       └── FuncCallNode
    │           ├── MemberAccessNode
    │           │   ├── VarNode ("Serial")
    │           │   └── VarNode ("begin")
    │           └── NumberNode (9600)
    └── FuncDefNode
        ├── TypeNode ("void")
        ├── DeclaratorNode
        │   └── VarNode ("loop")
        └── CompoundStmtNode
            ├── VarDeclNode
            │   ├── TypeNode ("int")
            │   ├── DeclaratorNode
            │   │   ├── VarNode ("arr")
            │   │   └── NumberNode (3)
            │   └── InitializerListNode
            │       ├── NumberNode (10)
            │       ├── NumberNode (20)
            │       └── NumberNode (30)
            ├── VarDeclNode
            │   ├── TypeNode ("int")
            │   ├── DeclaratorNode
            │   │   ├── VarNode ("ptr")
            │   │   └── PointerNode
            │   └── VarNode ("arr")
            ├── FuncCallNode
            │   ├── MemberAccessNode
            │   │   ├── VarNode ("Serial")
            │   │   └── VarNode ("print")
            │   └── StringNode ("First element: ")
            ├── FuncCallNode
            │   ├── MemberAccessNode
            │   │   ├── VarNode ("Serial")
            │   │   └── VarNode ("println")
            │   └── UnaryOpNode
            │       └── VarNode ("ptr")
            ├── PostfixOpNode
            │   └── VarNode ("ptr")
            ├── FuncCallNode
            │   ├── MemberAccessNode
            │   │   ├── VarNode ("Serial")
            │   │   └── VarNode ("print")
            │   └── StringNode ("Next element: ")
            ├── FuncCallNode
            │   ├── MemberAccessNode
            │   │   ├── VarNode ("Serial")
            │   │   └── VarNode ("println")
            │   └── UnaryOpNode
            │       └── VarNode ("ptr")
            ├── VarDeclNode
            │   ├── TypeNode ("int")
            │   ├── DeclaratorNode
            │   │   └── VarNode ("nextVal")
            │   └── UnaryOpNode
            │       └── BinOpNode
            │           ├── VarNode ("ptr")
            │           └── NumberNode (1)
            ├── FuncCallNode
            │   ├── MemberAccessNode
            │   │   ├── VarNode ("Serial")
            │   │   └── VarNode ("print")
            │   └── StringNode ("Next value with arithmetic: ")
            └── FuncCallNode
                ├── MemberAccessNode
                │   ├── VarNode ("Serial")
                │   └── VarNode ("println")
                └── VarNode ("nextVal")
--- End of AST ---

--- Starting Semantic Analysis ---
Define in scope 0: int
Define in scope 0: float
Define in scope 0: void
Define in scope 0: char
Entering global scope.
Define in scope 0: setup
Entering scope for function: setup
Entering new block scope.
Lookup: Serial
Lookup: begin
[FAILURE] SemanticError: Identifier not found: 'begin'

--- Running: test36.ino ---
[SUCCESS] Parsed successfully.
--- Abstract Syntax Tree ---
└── ProgramNode
    ├── StructDefNode
    │   └── StructDefNode
    │       ├── VarDeclNode
    │       │   ├── TypeNode ("int")
    │       │   └── DeclaratorNode
    │       │       └── VarNode ("x")
    │       └── VarDeclNode
    │           ├── TypeNode ("int")
    │           └── DeclaratorNode
    │               └── VarNode ("y")
    ├── FuncDefNode
    │   ├── TypeNode ("void")
    │   ├── DeclaratorNode
    │   │   └── VarNode ("setup")
    │   └── CompoundStmtNode
    │       └── FuncCallNode
    │           ├── MemberAccessNode
    │           │   ├── VarNode ("Serial")
    │           │   └── VarNode ("begin")
    │           └── NumberNode (9600)
    └── FuncDefNode
        ├── TypeNode ("void")
        ├── DeclaratorNode
        │   └── VarNode ("loop")
        └── CompoundStmtNode
            ├── VarDeclNode
            │   ├── TypeNode ("int")
            │   ├── DeclaratorNode
            │   │   └── VarNode ("numbers")
            │   └── InitializerListNode
            │       ├── NumberNode (1)
            │       ├── NumberNode (2)
            │       └── NumberNode (3)
            ├── VarDeclNode
            │   ├── TypeNode ("struct Point")
            │   ├── DeclaratorNode
            │   │   └── VarNode ("p")
            │   └── InitializerListNode
            │       ├── DesignatedInitializerNode
            │       │   ├── VarNode ("x")
            │       │   └── NumberNode (10)
            │       └── DesignatedInitializerNode
            │           ├── VarNode ("y")
            │           └── NumberNode (20)
            ├── FuncCallNode
            │   ├── MemberAccessNode
            │   │   ├── VarNode ("Serial")
            │   │   └── VarNode ("print")
            │   └── StringNode ("Numbers[1]: ")
            ├── FuncCallNode
            │   ├── MemberAccessNode
            │   │   ├── VarNode ("Serial")
            │   │   └── VarNode ("println")
            │   └── ArrayAccessNode
            │       ├── VarNode ("numbers")
            │       └── NumberNode (1)
            ├── FuncCallNode
            │   ├── MemberAccessNode
            │   │   ├── VarNode ("Serial")
            │   │   └── VarNode ("print")
            │   └── StringNode ("Point x: ")
            ├── FuncCallNode
            │   ├── MemberAccessNode
            │   │   ├── VarNode ("Serial")
            │   │   └── VarNode ("println")
            │   └── MemberAccessNode
            │       ├── VarNode ("p")
            │       └── VarNode ("x")
            ├── FuncCallNode
            │   ├── MemberAccessNode
            │   │   ├── VarNode ("Serial")
            │   │   └── VarNode ("print")
            │   └── StringNode ("Point y: ")
            └── FuncCallNode
                ├── MemberAccessNode
                │   ├── VarNode ("Serial")
                │   └── VarNode ("println")
                └── MemberAccessNode
                    ├── VarNode ("p")
                    └── VarNode ("y")
--- End of AST ---

--- Starting Semantic Analysis ---
Define in scope 0: int
Define in scope 0: float
Define in scope 0: void
Define in scope 0: char
Entering global scope.
[FAILURE] TypeError: node.members.forEach is not a function

--- Running: test37.ino ---
[SUCCESS] Parsed successfully.
--- Abstract Syntax Tree ---
└── ProgramNode
    ├── FuncDefNode
    │   ├── TypeNode ("void")
    │   ├── DeclaratorNode
    │   │   └── VarNode ("setup")
    │   └── CompoundStmtNode
    │       └── FuncCallNode
    │           ├── MemberAccessNode
    │           │   ├── VarNode ("Serial")
    │           │   └── VarNode ("begin")
    │           └── NumberNode (9600)
    └── FuncDefNode
        ├── TypeNode ("void")
        ├── DeclaratorNode
        │   └── VarNode ("loop")
        └── CompoundStmtNode
            ├── VarDeclNode
            │   ├── TypeNode ("char")
            │   ├── DeclaratorNode
            │   │   └── VarNode ("c")
            │   └── CharLiteralNode ("A")
            ├── VarDeclNode
            │   ├── TypeNode ("int")
            │   ├── DeclaratorNode
            │   │   └── VarNode ("i")
            │   └── NumberNode (5)
            ├── VarDeclNode
            │   ├── TypeNode ("float")
            │   ├── DeclaratorNode
            │   │   └── VarNode ("f")
            │   └── NumberNode (2.5)
            ├── VarDeclNode
            │   ├── TypeNode ("int")
            │   ├── DeclaratorNode
            │   │   └── VarNode ("result1")
            │   └── BinOpNode
            │       ├── VarNode ("c")
            │       └── VarNode ("i")
            ├── VarDeclNode
            │   ├── TypeNode ("float")
            │   ├── DeclaratorNode
            │   │   └── VarNode ("result2")
            │   └── BinOpNode
            │       ├── VarNode ("i")
            │       └── VarNode ("f")
            ├── FuncCallNode
            │   ├── MemberAccessNode
            │   │   ├── VarNode ("Serial")
            │   │   └── VarNode ("print")
            │   └── StringNode ("Result 1: ")
            ├── FuncCallNode
            │   ├── MemberAccessNode
            │   │   ├── VarNode ("Serial")
            │   │   └── VarNode ("println")
            │   └── VarNode ("result1")
            ├── FuncCallNode
            │   ├── MemberAccessNode
            │   │   ├── VarNode ("Serial")
            │   │   └── VarNode ("print")
            │   └── StringNode ("Result 2: ")
            └── FuncCallNode
                ├── MemberAccessNode
                │   ├── VarNode ("Serial")
                │   └── VarNode ("println")
                └── VarNode ("result2")
--- End of AST ---

--- Starting Semantic Analysis ---
Define in scope 0: int
Define in scope 0: float
Define in scope 0: void
Define in scope 0: char
Entering global scope.
Define in scope 0: setup
Entering scope for function: setup
Entering new block scope.
Lookup: Serial
Lookup: begin
[FAILURE] SemanticError: Identifier not found: 'begin'

--- Running: test38.ino ---
[SUCCESS] Parsed successfully.
--- Abstract Syntax Tree ---
└── ProgramNode
    ├── VarDeclNode
    │   ├── TypeNode ("typedef struct")
    │   ├── DeclaratorNode
    │   │   └── VarNode ("MyPoint")
    │   └── StructDefNode
    │       ├── VarDeclNode
    │       │   ├── TypeNode ("int")
    │       │   └── DeclaratorNode
    │       │       └── VarNode ("x")
    │       └── VarDeclNode
    │           ├── TypeNode ("int")
    │           └── DeclaratorNode
    │               └── VarNode ("y")
    ├── FuncDefNode
    │   ├── TypeNode ("void")
    │   ├── DeclaratorNode
    │   │   └── VarNode ("setup")
    │   └── CompoundStmtNode
    │       └── FuncCallNode
    │           ├── MemberAccessNode
    │           │   ├── VarNode ("Serial")
    │           │   └── VarNode ("begin")
    │           └── NumberNode (9600)
    └── FuncDefNode
        ├── TypeNode ("void")
        ├── DeclaratorNode
        │   └── VarNode ("loop")
        └── CompoundStmtNode
            ├── VarDeclNode
            │   ├── TypeNode ("MyPoint")
            │   └── DeclaratorNode
            │       └── VarNode ("p1")
            ├── VarDeclNode
            │   ├── TypeNode ("MyPoint")
            │   └── DeclaratorNode
            │       ├── VarNode ("p2")
            │       └── PointerNode
            ├── AssignNode
            │   ├── MemberAccessNode
            │   │   ├── VarNode ("p1")
            │   │   └── VarNode ("x")
            │   └── NumberNode (10)
            ├── AssignNode
            │   ├── MemberAccessNode
            │   │   ├── VarNode ("p1")
            │   │   └── VarNode ("y")
            │   └── NumberNode (20)
            ├── VarDeclNode
            │   ├── TypeNode ("p2")
            │   ├── DeclaratorNode
            │   │   └── NoOpNode
            │   └── UnaryOpNode
            │       └── VarNode ("p1")
            ├── FuncCallNode
            │   ├── MemberAccessNode
            │   │   ├── VarNode ("Serial")
            │   │   └── VarNode ("print")
            │   └── StringNode ("Value of x using pointer: ")
            ├── FuncCallNode
            │   ├── MemberAccessNode
            │   │   ├── VarNode ("Serial")
            │   │   └── VarNode ("println")
            │   └── MemberAccessNode
            │       ├── VarNode ("p2")
            │       └── VarNode ("x")
            ├── AssignNode
            │   ├── MemberAccessNode
            │   │   ├── VarNode ("p2")
            │   │   └── VarNode ("y")
            │   └── NumberNode (30)
            ├── FuncCallNode
            │   ├── MemberAccessNode
            │   │   ├── VarNode ("Serial")
            │   │   └── VarNode ("print")
            │   └── StringNode ("Modified value of y: ")
            └── FuncCallNode
                ├── MemberAccessNode
                │   ├── VarNode ("Serial")
                │   └── VarNode ("println")
                └── MemberAccessNode
                    ├── VarNode ("p1")
                    └── VarNode ("y")
--- End of AST ---

--- Starting Semantic Analysis ---
Define in scope 0: int
Define in scope 0: float
Define in scope 0: void
Define in scope 0: char
Entering global scope.
Lookup: typedef struct
Define in scope 0: MyPoint
Lookup: int
Define in scope 0: x
Lookup: int
Define in scope 0: y
Define in scope 0: setup
Entering scope for function: setup
Entering new block scope.
Lookup: Serial
Lookup: begin
[FAILURE] SemanticError: Identifier not found: 'begin'

--- Running: test39.ino ---
[SUCCESS] Parsed successfully.
--- Abstract Syntax Tree ---
└── ProgramNode
    ├── FuncDefNode
    │   ├── TypeNode ("void")
    │   ├── DeclaratorNode
    │   │   └── VarNode ("counter")
    │   └── CompoundStmtNode
    │       ├── VarDeclNode
    │       │   ├── TypeNode ("static int")
    │       │   ├── DeclaratorNode
    │       │   │   └── VarNode ("count")
    │       │   └── NumberNode (0)
    │       ├── PostfixOpNode
    │       │   └── VarNode ("count")
    │       ├── FuncCallNode
    │       │   ├── MemberAccessNode
    │       │   │   ├── VarNode ("Serial")
    │       │   │   └── VarNode ("print")
    │       │   └── StringNode ("Count is: ")
    │       └── FuncCallNode
    │           ├── MemberAccessNode
    │           │   ├── VarNode ("Serial")
    │           │   └── VarNode ("println")
    │           └── VarNode ("count")
    ├── FuncDefNode
    │   ├── TypeNode ("void")
    │   ├── DeclaratorNode
    │   │   └── VarNode ("setup")
    │   └── CompoundStmtNode
    │       └── FuncCallNode
    │           ├── MemberAccessNode
    │           │   ├── VarNode ("Serial")
    │           │   └── VarNode ("begin")
    │           └── NumberNode (9600)
    └── FuncDefNode
        ├── TypeNode ("void")
        ├── DeclaratorNode
        │   └── VarNode ("loop")
        └── CompoundStmtNode
            ├── VarDeclNode
            │   ├── TypeNode ("counter")
            │   └── DeclaratorNode
            │       └── DeclaratorNode
            │           └── NoOpNode
            └── FuncCallNode
                ├── VarNode ("delay")
                └── NumberNode (1000)
--- End of AST ---

--- Starting Semantic Analysis ---
Define in scope 0: int
Define in scope 0: float
Define in scope 0: void
Define in scope 0: char
Entering global scope.
Define in scope 0: counter
Entering scope for function: counter
Entering new block scope.
Lookup: static int
[FAILURE] SemanticError: Type not found: 'static int'

--- Running: test40.ino ---
[SUCCESS] Parsed successfully.
--- Abstract Syntax Tree ---
└── ProgramNode
    ├── FuncDefNode
    │   ├── TypeNode ("void")
    │   ├── DeclaratorNode
    │   │   └── VarNode ("setup")
    │   └── CompoundStmtNode
    │       └── FuncCallNode
    │           ├── MemberAccessNode
    │           │   ├── VarNode ("Serial")
    │           │   └── VarNode ("begin")
    │           └── NumberNode (9600)
    └── FuncDefNode
        ├── TypeNode ("void")
        ├── DeclaratorNode
        │   └── VarNode ("loop")
        └── CompoundStmtNode
            ├── VarDeclNode
            │   ├── TypeNode ("const int")
            │   ├── DeclaratorNode
            │   │   └── VarNode ("myConst")
            │   └── NumberNode (100)
            ├── VarDeclNode
            │   ├── TypeNode ("volatile int")
            │   ├── DeclaratorNode
            │   │   └── VarNode ("myVolatile")
            │   └── NumberNode (50)
            ├── FuncCallNode
            │   ├── MemberAccessNode
            │   │   ├── VarNode ("Serial")
            │   │   └── VarNode ("print")
            │   └── StringNode ("My constant: ")
            ├── FuncCallNode
            │   ├── MemberAccessNode
            │   │   ├── VarNode ("Serial")
            │   │   └── VarNode ("println")
            │   └── VarNode ("myConst")
            ├── FuncCallNode
            │   ├── MemberAccessNode
            │   │   ├── VarNode ("Serial")
            │   │   └── VarNode ("print")
            │   └── StringNode ("My volatile: ")
            └── FuncCallNode
                ├── MemberAccessNode
                │   ├── VarNode ("Serial")
                │   └── VarNode ("println")
                └── VarNode ("myVolatile")
--- End of AST ---

--- Starting Semantic Analysis ---
Define in scope 0: int
Define in scope 0: float
Define in scope 0: void
Define in scope 0: char
Entering global scope.
Define in scope 0: setup
Entering scope for function: setup
Entering new block scope.
Lookup: Serial
Lookup: begin
[FAILURE] SemanticError: Identifier not found: 'begin'

--- Running: test41.ino ---
[SUCCESS] Parsed successfully.
--- Abstract Syntax Tree ---
└── ProgramNode
    ├── FuncDefNode
    │   ├── TypeNode ("int")
    │   ├── DeclaratorNode
    │   │   └── VarNode ("myFunc")
    │   └── CompoundStmtNode
    │       ├── FuncCallNode
    │       │   ├── MemberAccessNode
    │       │   │   ├── VarNode ("Serial")
    │       │   │   └── VarNode ("println")
    │       │   └── StringNode ("myFunc() was called.")
    │       └── ReturnNode
    │           └── NumberNode (1)
    ├── FuncDefNode
    │   ├── TypeNode ("void")
    │   ├── DeclaratorNode
    │   │   └── VarNode ("setup")
    │   └── CompoundStmtNode
    │       └── FuncCallNode
    │           ├── MemberAccessNode
    │           │   ├── VarNode ("Serial")
    │           │   └── VarNode ("begin")
    │           └── NumberNode (9600)
    └── FuncDefNode
        ├── TypeNode ("void")
        ├── DeclaratorNode
        │   └── VarNode ("loop")
        └── CompoundStmtNode
            ├── VarDeclNode
            │   ├── TypeNode ("int")
            │   ├── DeclaratorNode
            │   │   └── VarNode ("x")
            │   └── NumberNode (0)
            ├── VarDeclNode
            │   ├── TypeNode ("int")
            │   ├── DeclaratorNode
            │   │   └── VarNode ("y")
            │   └── NumberNode (5)
            ├── IfNode
            │   ├── BinOpNode
            │   │   ├── BinOpNode
            │   │   │   ├── VarNode ("x")
            │   │   │   └── NumberNode (0)
            │   │   └── FuncCallNode
            │   │       └── VarNode ("myFunc")
            │   └── CompoundStmtNode
            │       └── FuncCallNode
            │           ├── MemberAccessNode
            │           │   ├── VarNode ("Serial")
            │           │   └── VarNode ("println")
            │           └── StringNode ("Condition 1 is true.")
            └── IfNode
                ├── BinOpNode
                │   ├── BinOpNode
                │   │   ├── VarNode ("x")
                │   │   └── NumberNode (1)
                │   └── FuncCallNode
                │       └── VarNode ("myFunc")
                └── CompoundStmtNode
                    └── FuncCallNode
                        ├── MemberAccessNode
                        │   ├── VarNode ("Serial")
                        │   └── VarNode ("println")
                        └── StringNode ("Condition 2 is true.")
--- End of AST ---

--- Starting Semantic Analysis ---
Define in scope 0: int
Define in scope 0: float
Define in scope 0: void
Define in scope 0: char
Entering global scope.
Define in scope 0: myFunc
Entering scope for function: myFunc
Entering new block scope.
Lookup: Serial
Lookup: println
[FAILURE] SemanticError: Identifier not found: 'println'

--- Running: test42.ino ---
[SUCCESS] Parsed successfully.
--- Abstract Syntax Tree ---
└── ProgramNode
    ├── FuncDefNode
    │   ├── TypeNode ("void")
    │   ├── DeclaratorNode
    │   │   └── VarNode ("setup")
    │   └── CompoundStmtNode
    │       └── FuncCallNode
    │           ├── MemberAccessNode
    │           │   ├── VarNode ("Serial")
    │           │   └── VarNode ("begin")
    │           └── NumberNode (9600)
    └── FuncDefNode
        ├── TypeNode ("void")
        ├── DeclaratorNode
        │   └── VarNode ("loop")
        └── CompoundStmtNode
            ├── VarDeclNode
            │   ├── TypeNode ("int")
            │   ├── DeclaratorNode
            │   │   └── VarNode ("x")
            │   └── NumberNode (0)
            └── ForNode
                ├── VarDeclNode
                │   ├── TypeNode ("int")
                │   ├── DeclaratorNode
                │   │   └── VarNode ("i")
                │   └── NumberNode (0)
                ├── BinOpNode
                │   ├── VarNode ("i")
                │   └── NumberNode (5)
                ├── PostfixOpNode
                │   └── VarNode ("i")
                └── CompoundStmtNode
                    ├── VarDeclNode
                    │   ├── TypeNode ("x")
                    │   ├── DeclaratorNode
                    │   │   └── NoOpNode
                    │   └── TernaryOpNode
                    │       ├── BinOpNode
                    │       │   ├── VarNode ("i")
                    │       │   └── NumberNode (0)
                    │       ├── NumberNode (1)
                    │       └── TernaryOpNode
                    │           ├── BinOpNode
                    │           │   ├── BinOpNode
                    │           │   │   ├── VarNode ("i")
                    │           │   │   └── NumberNode (2)
                    │           │   └── NumberNode (0)
                    │           ├── BinOpNode
                    │           │   ├── VarNode ("i")
                    │           │   └── NumberNode (10)
                    │           └── BinOpNode
                    │               ├── VarNode ("i")
                    │               └── NumberNode (10)
                    ├── FuncCallNode
                    │   ├── MemberAccessNode
                    │   │   ├── VarNode ("Serial")
                    │   │   └── VarNode ("print")
                    │   └── StringNode ("For i=")
                    ├── FuncCallNode
                    │   ├── MemberAccessNode
                    │   │   ├── VarNode ("Serial")
                    │   │   └── VarNode ("print")
                    │   └── VarNode ("i")
                    ├── FuncCallNode
                    │   ├── MemberAccessNode
                    │   │   ├── VarNode ("Serial")
                    │   │   └── VarNode ("print")
                    │   └── StringNode (", x is: ")
                    └── FuncCallNode
                        ├── MemberAccessNode
                        │   ├── VarNode ("Serial")
                        │   └── VarNode ("println")
                        └── VarNode ("x")
--- End of AST ---

--- Starting Semantic Analysis ---
Define in scope 0: int
Define in scope 0: float
Define in scope 0: void
Define in scope 0: char
Entering global scope.
Define in scope 0: setup
Entering scope for function: setup
Entering new block scope.
Lookup: Serial
Lookup: begin
[FAILURE] SemanticError: Identifier not found: 'begin'

--- Running: test43.ino ---
[SUCCESS] Parsed successfully.
--- Abstract Syntax Tree ---
└── ProgramNode
    ├── FuncDefNode
    │   ├── TypeNode ("void")
    │   ├── DeclaratorNode
    │   │   └── VarNode ("setup")
    │   └── CompoundStmtNode
    │       └── FuncCallNode
    │           ├── MemberAccessNode
    │           │   ├── VarNode ("Serial")
    │           │   └── VarNode ("begin")
    │           └── NumberNode (9600)
    └── FuncDefNode
        ├── TypeNode ("void")
        ├── DeclaratorNode
        │   └── VarNode ("loop")
        └── CompoundStmtNode
            └── ForNode
                ├── VarDeclNode
                │   ├── TypeNode ("int")
                │   ├── DeclaratorNode
                │   │   └── VarNode ("i")
                │   └── NumberNode (0)
                ├── BinOpNode
                │   ├── VarNode ("i")
                │   └── NumberNode (3)
                ├── PostfixOpNode
                │   └── VarNode ("i")
                └── CompoundStmtNode
                    ├── FuncCallNode
                    │   ├── MemberAccessNode
                    │   │   ├── VarNode ("Serial")
                    │   │   └── VarNode ("print")
                    │   └── StringNode ("i: ")
                    └── FuncCallNode
                        ├── MemberAccessNode
                        │   ├── VarNode ("Serial")
                        │   └── VarNode ("println")
                        └── VarNode ("i")
--- End of AST ---

--- Starting Semantic Analysis ---
Define in scope 0: int
Define in scope 0: float
Define in scope 0: void
Define in scope 0: char
Entering global scope.
Define in scope 0: setup
Entering scope for function: setup
Entering new block scope.
Lookup: Serial
Lookup: begin
[FAILURE] SemanticError: Identifier not found: 'begin'

--- Running: test44.ino ---
[SUCCESS] Parsed successfully.
--- Abstract Syntax Tree ---
└── ProgramNode
    ├── FuncDefNode
    │   ├── TypeNode ("void")
    │   ├── DeclaratorNode
    │   │   └── VarNode ("setup")
    │   └── CompoundStmtNode
    │       └── FuncCallNode
    │           ├── MemberAccessNode
    │           │   ├── VarNode ("Serial")
    │           │   └── VarNode ("begin")
    │           └── NumberNode (9600)
    └── FuncDefNode
        ├── TypeNode ("void")
        ├── DeclaratorNode
        │   └── VarNode ("loop")
        └── CompoundStmtNode
            ├── VarDeclNode
            │   ├── TypeNode ("int")
            │   ├── DeclaratorNode
            │   │   └── VarNode ("a")
            │   └── NumberNode (10)
            ├── VarDeclNode
            │   ├── TypeNode ("char")
            │   ├── DeclaratorNode
            │   │   └── VarNode ("b")
            │   └── CharLiteralNode ("B")
            ├── VarDeclNode
            │   ├── TypeNode ("float")
            │   ├── DeclaratorNode
            │   │   └── VarNode ("c")
            │   └── NumberNode (3.14)
            ├── FuncCallNode
            │   ├── MemberAccessNode
            │   │   ├── VarNode ("Serial")
            │   │   └── VarNode ("print")
            │   └── StringNode ("Size of int: ")
            ├── FuncCallNode
            │   ├── MemberAccessNode
            │   │   ├── VarNode ("Serial")
            │   │   └── VarNode ("println")
            │   └── UnaryOpNode
            │       └── VarNode ("a")
            ├── FuncCallNode
            │   ├── MemberAccessNode
            │   │   ├── VarNode ("Serial")
            │   │   └── VarNode ("print")
            │   └── StringNode ("Size of char: ")
            ├── FuncCallNode
            │   ├── MemberAccessNode
            │   │   ├── VarNode ("Serial")
            │   │   └── VarNode ("println")
            │   └── UnaryOpNode
            │       └── TypeNode ("char")
            ├── FuncCallNode
            │   ├── MemberAccessNode
            │   │   ├── VarNode ("Serial")
            │   │   └── VarNode ("print")
            │   └── StringNode ("Size of float: ")
            └── FuncCallNode
                ├── MemberAccessNode
                │   ├── VarNode ("Serial")
                │   └── VarNode ("println")
                └── UnaryOpNode
                    └── VarNode ("c")
--- End of AST ---

--- Starting Semantic Analysis ---
Define in scope 0: int
Define in scope 0: float
Define in scope 0: void
Define in scope 0: char
Entering global scope.
Define in scope 0: setup
Entering scope for function: setup
Entering new block scope.
Lookup: Serial
Lookup: begin
[FAILURE] SemanticError: Identifier not found: 'begin'

--- Running: test45.ino ---
[SUCCESS] Parsed successfully.
--- Abstract Syntax Tree ---
└── ProgramNode
    ├── FuncDefNode
    │   ├── TypeNode ("void")
    │   ├── DeclaratorNode
    │   │   └── VarNode ("setup")
    │   └── CompoundStmtNode
    │       └── FuncCallNode
    │           ├── MemberAccessNode
    │           │   ├── VarNode ("Serial")
    │           │   └── VarNode ("begin")
    │           └── NumberNode (9600)
    └── FuncDefNode
        ├── TypeNode ("void")
        ├── DeclaratorNode
        │   └── VarNode ("loop")
        └── CompoundStmtNode
            ├── VarDeclNode
            │   ├── TypeNode ("int")
            │   ├── DeclaratorNode
            │   │   └── VarNode ("a")
            │   └── NumberNode (0)
            └── ForNode
                ├── VarDeclNode
                │   ├── TypeNode ("int")
                │   ├── DeclaratorNode
                │   │   └── VarNode ("i")
                │   └── NumberNode (0)
                ├── BinOpNode
                │   ├── VarNode ("i")
                │   └── NumberNode (3)
                ├── PostfixOpNode
                │   └── VarNode ("i")
                └── CompoundStmtNode
                    ├── FuncCallNode
                    │   ├── MemberAccessNode
                    │   │   ├── VarNode ("Serial")
                    │   │   └── VarNode ("print")
                    │   └── StringNode ("Initial a: ")
                    ├── FuncCallNode
                    │   ├── MemberAccessNode
                    │   │   ├── VarNode ("Serial")
                    │   │   └── VarNode ("println")
                    │   └── VarNode ("a")
                    ├── VarDeclNode
                    │   ├── TypeNode ("a")
                    │   ├── DeclaratorNode
                    │   │   └── NoOpNode
                    │   └── BinOpNode
                    │       ├── PostfixOpNode
                    │       │   └── VarNode ("a")
                    │       └── PostfixOpNode
                    │           └── VarNode ("b")
                    ├── FuncCallNode
                    │   ├── MemberAccessNode
                    │   │   ├── VarNode ("Serial")
                    │   │   └── VarNode ("print")
                    │   └── StringNode ("Final a: ")
                    └── FuncCallNode
                        ├── MemberAccessNode
                        │   ├── VarNode ("Serial")
                        │   └── VarNode ("println")
                        └── VarNode ("a")
--- End of AST ---

--- Starting Semantic Analysis ---
Define in scope 0: int
Define in scope 0: float
Define in scope 0: void
Define in scope 0: char
Entering global scope.
Define in scope 0: setup
Entering scope for function: setup
Entering new block scope.
Lookup: Serial
Lookup: begin
[FAILURE] SemanticError: Identifier not found: 'begin'

--- Running: test46.ino ---
[SUCCESS] Parsed successfully.
--- Abstract Syntax Tree ---
└── ProgramNode
    ├── FuncDefNode
    │   ├── TypeNode ("void")
    │   ├── DeclaratorNode
    │   │   └── VarNode ("setup")
    │   └── CompoundStmtNode
    │       └── FuncCallNode
    │           ├── MemberAccessNode
    │           │   ├── VarNode ("Serial")
    │           │   └── VarNode ("begin")
    │           └── NumberNode (9600)
    └── FuncDefNode
        ├── TypeNode ("void")
        ├── DeclaratorNode
        │   └── VarNode ("loop")
        └── CompoundStmtNode
            └── ForNode
                ├── VarDeclNode
                │   ├── TypeNode ("int")
                │   ├── DeclaratorNode
                │   │   └── VarNode ("i")
                │   └── NumberNode (0)
                ├── BinOpNode
                │   ├── VarNode ("i")
                │   └── NumberNode (5)
                ├── PostfixOpNode
                │   └── VarNode ("i")
                └── CompoundStmtNode
                    ├── ForNode
                    │   ├── VarDeclNode
                    │   │   ├── TypeNode ("int")
                    │   │   ├── DeclaratorNode
                    │   │   │   └── VarNode ("j")
                    │   │   └── NumberNode (0)
                    │   ├── BinOpNode
                    │   │   ├── VarNode ("j")
                    │   │   └── NumberNode (5)
                    │   ├── PostfixOpNode
                    │   │   └── VarNode ("j")
                    │   └── CompoundStmtNode
                    │       ├── IfNode
                    │       │   ├── BinOpNode
                    │       │   │   ├── BinOpNode
                    │       │   │   │   ├── VarNode ("i")
                    │       │   │   │   └── NumberNode (2)
                    │       │   │   └── BinOpNode
                    │       │   │       ├── VarNode ("j")
                    │       │   │       └── NumberNode (2)
                    │       │   └── CompoundStmtNode
                    │       │       ├── FuncCallNode
                    │       │       │   ├── MemberAccessNode
                    │       │       │   │   ├── VarNode ("Serial")
                    │       │       │   │   └── VarNode ("println")
                    │       │       │   └── StringNode ("Skipping inner loop...")
                    │       │       └── ContinueNode
                    │       ├── IfNode
                    │       │   ├── BinOpNode
                    │       │   │   ├── VarNode ("i")
                    │       │   │   └── NumberNode (3)
                    │       │   └── CompoundStmtNode
                    │       │       ├── FuncCallNode
                    │       │       │   ├── MemberAccessNode
                    │       │       │   │   ├── VarNode ("Serial")
                    │       │       │   │   └── VarNode ("println")
                    │       │       │   └── StringNode ("Breaking outer loop...")
                    │       │       └── BreakNode
                    │       ├── FuncCallNode
                    │       │   ├── MemberAccessNode
                    │       │   │   ├── VarNode ("Serial")
                    │       │   │   └── VarNode ("print")
                    │       │   └── StringNode ("i: ")
                    │       ├── FuncCallNode
                    │       │   ├── MemberAccessNode
                    │       │   │   ├── VarNode ("Serial")
                    │       │   │   └── VarNode ("print")
                    │       │   └── VarNode ("i")
                    │       ├── FuncCallNode
                    │       │   ├── MemberAccessNode
                    │       │   │   ├── VarNode ("Serial")
                    │       │   │   └── VarNode ("print")
                    │       │   └── StringNode (", j: ")
                    │       └── FuncCallNode
                    │           ├── MemberAccessNode
                    │           │   ├── VarNode ("Serial")
                    │           │   └── VarNode ("println")
                    │           └── VarNode ("j")
                    └── IfNode
                        ├── BinOpNode
                        │   ├── VarNode ("i")
                        │   └── NumberNode (3)
                        └── CompoundStmtNode
                            └── BreakNode
--- End of AST ---

--- Starting Semantic Analysis ---
Define in scope 0: int
Define in scope 0: float
Define in scope 0: void
Define in scope 0: char
Entering global scope.
Define in scope 0: setup
Entering scope for function: setup
Entering new block scope.
Lookup: Serial
Lookup: begin
[FAILURE] SemanticError: Identifier not found: 'begin'

--- Running: test47.ino ---
[SUCCESS] Parsed successfully.
--- Abstract Syntax Tree ---
└── ProgramNode
    ├── FuncDefNode
    │   ├── TypeNode ("void")
    │   ├── DeclaratorNode
    │   │   └── VarNode ("setup")
    │   └── CompoundStmtNode
    │       └── FuncCallNode
    │           ├── MemberAccessNode
    │           │   ├── VarNode ("Serial")
    │           │   └── VarNode ("begin")
    │           └── NumberNode (9600)
    └── FuncDefNode
        ├── TypeNode ("void")
        ├── DeclaratorNode
        │   └── VarNode ("loop")
        └── CompoundStmtNode
            ├── VarDeclNode
            │   ├── TypeNode ("int")
            │   ├── DeclaratorNode
            │   │   └── VarNode ("x")
            │   └── NumberNode (100)
            ├── VarDeclNode
            │   ├── TypeNode ("int")
            │   ├── DeclaratorNode
            │   │   ├── VarNode ("p1")
            │   │   └── PointerNode
            │   └── UnaryOpNode
            │       └── VarNode ("x")
            ├── VarDeclNode
            │   ├── TypeNode ("int")
            │   ├── DeclaratorNode
            │   │   ├── VarNode ("p2")
            │   │   └── PointerNode
            │   │       └── PointerNode
            │   └── UnaryOpNode
            │       └── VarNode ("p1")
            ├── FuncCallNode
            │   ├── MemberAccessNode
            │   │   ├── VarNode ("Serial")
            │   │   └── VarNode ("print")
            │   └── StringNode ("Value of x: ")
            ├── FuncCallNode
            │   ├── MemberAccessNode
            │   │   ├── VarNode ("Serial")
            │   │   └── VarNode ("println")
            │   └── VarNode ("x")
            ├── FuncCallNode
            │   ├── MemberAccessNode
            │   │   ├── VarNode ("Serial")
            │   │   └── VarNode ("print")
            │   └── StringNode ("Value of *p1: ")
            ├── FuncCallNode
            │   ├── MemberAccessNode
            │   │   ├── VarNode ("Serial")
            │   │   └── VarNode ("println")
            │   └── UnaryOpNode
            │       └── VarNode ("p1")
            ├── FuncCallNode
            │   ├── MemberAccessNode
            │   │   ├── VarNode ("Serial")
            │   │   └── VarNode ("print")
            │   └── StringNode ("Value of **p2: ")
            ├── FuncCallNode
            │   ├── MemberAccessNode
            │   │   ├── VarNode ("Serial")
            │   │   └── VarNode ("println")
            │   └── UnaryOpNode
            │       └── UnaryOpNode
            │           └── VarNode ("p2")
            ├── AssignNode
            │   ├── UnaryOpNode
            │   │   └── UnaryOpNode
            │   │       └── VarNode ("p2")
            │   └── NumberNode (200)
            ├── FuncCallNode
            │   ├── MemberAccessNode
            │   │   ├── VarNode ("Serial")
            │   │   └── VarNode ("print")
            │   └── StringNode ("New value of x: ")
            └── FuncCallNode
                ├── MemberAccessNode
                │   ├── VarNode ("Serial")
                │   └── VarNode ("println")
                └── VarNode ("x")
--- End of AST ---

--- Starting Semantic Analysis ---
Define in scope 0: int
Define in scope 0: float
Define in scope 0: void
Define in scope 0: char
Entering global scope.
Define in scope 0: setup
Entering scope for function: setup
Entering new block scope.
Lookup: Serial
Lookup: begin
[FAILURE] SemanticError: Identifier not found: 'begin'

--- Running: test48.ino ---
[SUCCESS] Parsed successfully.
--- Abstract Syntax Tree ---
└── ProgramNode
    ├── StructDefNode
    │   └── StructDefNode
    │       ├── VarDeclNode
    │       │   ├── TypeNode ("int")
    │       │   └── DeclaratorNode
    │       │       └── VarNode ("data")
    │       └── VarDeclNode
    │           ├── TypeNode ("struct Node")
    │           └── DeclaratorNode
    │               ├── VarNode ("next")
    │               └── PointerNode
    ├── FuncDefNode
    │   ├── TypeNode ("void")
    │   ├── DeclaratorNode
    │   │   └── VarNode ("setup")
    │   └── CompoundStmtNode
    │       └── FuncCallNode
    │           ├── MemberAccessNode
    │           │   ├── VarNode ("Serial")
    │           │   └── VarNode ("begin")
    │           └── NumberNode (9600)
    └── FuncDefNode
        ├── TypeNode ("void")
        ├── DeclaratorNode
        │   └── VarNode ("loop")
        └── CompoundStmtNode
            ├── VarDeclNode
            │   ├── TypeNode ("struct Node")
            │   └── DeclaratorNode
            │       └── VarNode ("n1")
            ├── AssignNode
            │   ├── MemberAccessNode
            │   │   ├── VarNode ("n1")
            │   │   └── VarNode ("data")
            │   └── NumberNode (10)
            ├── AssignNode
            │   ├── MemberAccessNode
            │   │   ├── VarNode ("n1")
            │   │   └── VarNode ("next")
            │   └── UnaryOpNode
            │       └── VarNode ("n2")
            ├── AssignNode
            │   ├── MemberAccessNode
            │   │   ├── VarNode ("n2")
            │   │   └── VarNode ("data")
            │   └── NumberNode (20)
            ├── AssignNode
            │   ├── MemberAccessNode
            │   │   ├── VarNode ("n2")
            │   │   └── VarNode ("next")
            │   └── VarNode ("NULL")
            ├── FuncCallNode
            │   ├── MemberAccessNode
            │   │   ├── VarNode ("Serial")
            │   │   └── VarNode ("print")
            │   └── StringNode ("Data from n1: ")
            ├── FuncCallNode
            │   ├── MemberAccessNode
            │   │   ├── VarNode ("Serial")
            │   │   └── VarNode ("println")
            │   └── MemberAccessNode
            │       ├── VarNode ("n1")
            │       └── VarNode ("data")
            ├── FuncCallNode
            │   ├── MemberAccessNode
            │   │   ├── VarNode ("Serial")
            │   │   └── VarNode ("print")
            │   └── StringNode ("Data from n2 via n1: ")
            └── FuncCallNode
                ├── MemberAccessNode
                │   ├── VarNode ("Serial")
                │   └── VarNode ("println")
                └── MemberAccessNode
                    ├── MemberAccessNode
                    │   ├── VarNode ("n1")
                    │   └── VarNode ("next")
                    └── VarNode ("data")
--- End of AST ---

--- Starting Semantic Analysis ---
Define in scope 0: int
Define in scope 0: float
Define in scope 0: void
Define in scope 0: char
Entering global scope.
[FAILURE] TypeError: node.members.forEach is not a function

--- Running: test49.ino ---
[SUCCESS] Parsed successfully.
--- Abstract Syntax Tree ---
└── ProgramNode
    ├── VarDeclNode
    │   ├── TypeNode ("static int")
    │   ├── DeclaratorNode
    │   │   └── VarNode ("global_counter")
    │   └── NumberNode (0)
    ├── FuncDefNode
    │   ├── TypeNode ("static void")
    │   ├── DeclaratorNode
    │   │   └── VarNode ("incrementCounter")
    │   └── CompoundStmtNode
    │       └── PostfixOpNode
    │           └── VarNode ("global_counter")
    ├── FuncDefNode
    │   ├── TypeNode ("void")
    │   ├── DeclaratorNode
    │   │   └── VarNode ("setup")
    │   └── CompoundStmtNode
    │       └── FuncCallNode
    │           ├── MemberAccessNode
    │           │   ├── VarNode ("Serial")
    │           │   └── VarNode ("begin")
    │           └── NumberNode (9600)
    └── FuncDefNode
        ├── TypeNode ("void")
        ├── DeclaratorNode
        │   └── VarNode ("loop")
        └── CompoundStmtNode
            ├── VarDeclNode
            │   ├── TypeNode ("incrementCounter")
            │   └── DeclaratorNode
            │       └── DeclaratorNode
            │           └── NoOpNode
            ├── FuncCallNode
            │   ├── MemberAccessNode
            │   │   ├── VarNode ("Serial")
            │   │   └── VarNode ("print")
            │   └── StringNode ("Counter: ")
            ├── FuncCallNode
            │   ├── MemberAccessNode
            │   │   ├── VarNode ("Serial")
            │   │   └── VarNode ("println")
            │   └── VarNode ("global_counter")
            └── FuncCallNode
                ├── VarNode ("delay")
                └── NumberNode (1000)
--- End of AST ---

--- Starting Semantic Analysis ---
Define in scope 0: int
Define in scope 0: float
Define in scope 0: void
Define in scope 0: char
Entering global scope.
Lookup: static int
[FAILURE] SemanticError: Type not found: 'static int'

--- Running: test50.ino ---
[SUCCESS] Parsed successfully.
--- Abstract Syntax Tree ---
└── ProgramNode
    ├── FuncDefNode
    │   ├── TypeNode ("void")
    │   ├── DeclaratorNode
    │   │   └── VarNode ("setup")
    │   └── CompoundStmtNode
    │       └── FuncCallNode
    │           ├── MemberAccessNode
    │           │   ├── VarNode ("Serial")
    │           │   └── VarNode ("begin")
    │           └── NumberNode (9600)
    └── FuncDefNode
        ├── TypeNode ("void")
        ├── DeclaratorNode
        │   └── VarNode ("loop")
        └── CompoundStmtNode
            ├── VarDeclNode
            │   ├── TypeNode ("unsigned int")
            │   ├── DeclaratorNode
            │   │   └── VarNode ("i")
            │   └── NumberNode (4294967295)
            ├── FuncCallNode
            │   ├── MemberAccessNode
            │   │   ├── VarNode ("Serial")
            │   │   └── VarNode ("print")
            │   └── StringNode ("Initial value: ")
            ├── FuncCallNode
            │   ├── MemberAccessNode
            │   │   ├── VarNode ("Serial")
            │   │   └── VarNode ("println")
            │   └── VarNode ("i")
            ├── PostfixOpNode
            │   └── VarNode ("i")
            ├── FuncCallNode
            │   ├── MemberAccessNode
            │   │   ├── VarNode ("Serial")
            │   │   └── VarNode ("print")
            │   └── StringNode ("After increment (rollover): ")
            ├── FuncCallNode
            │   ├── MemberAccessNode
            │   │   ├── VarNode ("Serial")
            │   │   └── VarNode ("println")
            │   └── VarNode ("i")
            ├── VarDeclNode
            │   ├── TypeNode ("i")
            │   ├── DeclaratorNode
            │   │   └── NoOpNode
            │   └── NumberNode (0)
            ├── PostfixOpNode
            │   └── VarNode ("i")
            ├── FuncCallNode
            │   ├── MemberAccessNode
            │   │   ├── VarNode ("Serial")
            │   │   └── VarNode ("print")
            │   └── StringNode ("After decrement (rollover): ")
            └── FuncCallNode
                ├── MemberAccessNode
                │   ├── VarNode ("Serial")
                │   └── VarNode ("println")
                └── VarNode ("i")
--- End of AST ---

--- Starting Semantic Analysis ---
Define in scope 0: int
Define in scope 0: float
Define in scope 0: void
Define in scope 0: char
Entering global scope.
Define in scope 0: setup
Entering scope for function: setup
Entering new block scope.
Lookup: Serial
Lookup: begin
[FAILURE] SemanticError: Identifier not found: 'begin'

--- Running: test51.ino ---
[SUCCESS] Parsed successfully.
--- Abstract Syntax Tree ---
└── ProgramNode
    ├── FuncDefNode
    │   ├── TypeNode ("int")
    │   ├── DeclaratorNode
    │   │   ├── VarNode ("applyOperation")
    │   │   ├── ParamNode
    │   │   │   ├── TypeNode ("int")
    │   │   │   └── DeclaratorNode
    │   │   │       ├── DeclaratorNode
    │   │   │       │   ├── VarNode ("op")
    │   │   │       │   └── PointerNode
    │   │   │       ├── ParamNode
    │   │   │       │   ├── TypeNode ("int")
    │   │   │       │   └── DeclaratorNode
    │   │   │       │       └── NoOpNode
    │   │   │       └── ParamNode
    │   │   │           ├── TypeNode ("int")
    │   │   │           └── DeclaratorNode
    │   │   │               └── NoOpNode
    │   │   ├── ParamNode
    │   │   │   ├── TypeNode ("int")
    │   │   │   └── DeclaratorNode
    │   │   │       └── VarNode ("a")
    │   │   └── ParamNode
    │   │       ├── TypeNode ("int")
    │   │       └── DeclaratorNode
    │   │           └── VarNode ("b")
    │   ├── ParamNode
    │   │   ├── TypeNode ("int")
    │   │   └── DeclaratorNode
    │   │       ├── DeclaratorNode
    │   │       │   ├── VarNode ("op")
    │   │       │   └── PointerNode
    │   │       ├── ParamNode
    │   │       │   ├── TypeNode ("int")
    │   │       │   └── DeclaratorNode
    │   │       │       └── NoOpNode
    │   │       └── ParamNode
    │   │           ├── TypeNode ("int")
    │   │           └── DeclaratorNode
    │   │               └── NoOpNode
    │   ├── ParamNode
    │   │   ├── TypeNode ("int")
    │   │   └── DeclaratorNode
    │   │       └── VarNode ("a")
    │   ├── ParamNode
    │   │   ├── TypeNode ("int")
    │   │   └── DeclaratorNode
    │   │       └── VarNode ("b")
    │   └── CompoundStmtNode
    │       └── ReturnNode
    │           └── FuncCallNode
    │               ├── VarNode ("op")
    │               ├── VarNode ("a")
    │               └── VarNode ("b")
    ├── FuncDefNode
    │   ├── TypeNode ("int")
    │   ├── DeclaratorNode
    │   │   ├── VarNode ("add")
    │   │   ├── ParamNode
    │   │   │   ├── TypeNode ("int")
    │   │   │   └── DeclaratorNode
    │   │   │       └── VarNode ("x")
    │   │   └── ParamNode
    │   │       ├── TypeNode ("int")
    │   │       └── DeclaratorNode
    │   │           └── VarNode ("y")
    │   ├── ParamNode
    │   │   ├── TypeNode ("int")
    │   │   └── DeclaratorNode
    │   │       └── VarNode ("x")
    │   ├── ParamNode
    │   │   ├── TypeNode ("int")
    │   │   └── DeclaratorNode
    │   │       └── VarNode ("y")
    │   └── CompoundStmtNode
    │       └── ReturnNode
    │           └── BinOpNode
    │               ├── VarNode ("x")
    │               └── VarNode ("y")
    ├── FuncDefNode
    │   ├── TypeNode ("void")
    │   ├── DeclaratorNode
    │   │   └── VarNode ("setup")
    │   └── CompoundStmtNode
    │       └── FuncCallNode
    │           ├── MemberAccessNode
    │           │   ├── VarNode ("Serial")
    │           │   └── VarNode ("begin")
    │           └── NumberNode (9600)
    └── FuncDefNode
        ├── TypeNode ("void")
        ├── DeclaratorNode
        │   └── VarNode ("loop")
        └── CompoundStmtNode
            ├── VarDeclNode
            │   ├── TypeNode ("int")
            │   ├── DeclaratorNode
            │   │   └── VarNode ("result")
            │   └── FuncCallNode
            │       ├── VarNode ("applyOperation")
            │       ├── VarNode ("add")
            │       ├── NumberNode (5)
            │       └── NumberNode (10)
            ├── FuncCallNode
            │   ├── MemberAccessNode
            │   │   ├── VarNode ("Serial")
            │   │   └── VarNode ("print")
            │   └── StringNode ("Result of applyOperation: ")
            └── FuncCallNode
                ├── MemberAccessNode
                │   ├── VarNode ("Serial")
                │   └── VarNode ("println")
                └── VarNode ("result")
--- End of AST ---

--- Starting Semantic Analysis ---
Define in scope 0: int
Define in scope 0: float
Define in scope 0: void
Define in scope 0: char
Entering global scope.
Define in scope 0: applyOperation
Entering scope for function: applyOperation
Lookup: int
Define in scope 1: op
Lookup: int
Define in scope 1: a
Lookup: int
Define in scope 1: b
Entering new block scope.
Lookup: op
Lookup: a
Lookup: b
Leaving block scope.
Leaving scope for function: applyOperation
Define in scope 0: add
Entering scope for function: add
Lookup: int
Define in scope 1: x
Lookup: int
Define in scope 1: y
Entering new block scope.
Lookup: x
Lookup: y
Leaving block scope.
Leaving scope for function: add
Define in scope 0: setup
Entering scope for function: setup
Entering new block scope.
Lookup: Serial
Lookup: begin
[FAILURE] SemanticError: Identifier not found: 'begin'

--- Running: test52.ino ---
[SUCCESS] Parsed successfully.
--- Abstract Syntax Tree ---
└── ProgramNode
    ├── StructDefNode
    │   └── StructDefNode
    │       ├── VarDeclNode
    │       │   ├── TypeNode ("unsigned int")
    │       │   ├── DeclaratorNode
    │       │   │   └── VarNode ("a")
    │       │   └── NumberNode (1)
    │       ├── VarDeclNode
    │       │   ├── TypeNode ("unsigned int")
    │       │   ├── DeclaratorNode
    │       │   │   └── VarNode ("b")
    │       │   └── NumberNode (1)
    │       └── VarDeclNode
    │           ├── TypeNode ("unsigned int")
    │           ├── DeclaratorNode
    │           │   └── VarNode ("c")
    │           └── NumberNode (6)
    ├── FuncDefNode
    │   ├── TypeNode ("void")
    │   ├── DeclaratorNode
    │   │   └── VarNode ("setup")
    │   └── CompoundStmtNode
    │       └── FuncCallNode
    │           ├── MemberAccessNode
    │           │   ├── VarNode ("Serial")
    │           │   └── VarNode ("begin")
    │           └── NumberNode (9600)
    └── FuncDefNode
        ├── TypeNode ("void")
        ├── DeclaratorNode
        │   └── VarNode ("loop")
        └── CompoundStmtNode
            ├── VarDeclNode
            │   ├── TypeNode ("struct MyFlags")
            │   └── DeclaratorNode
            │       └── VarNode ("flags")
            ├── AssignNode
            │   ├── MemberAccessNode
            │   │   ├── VarNode ("flags")
            │   │   └── VarNode ("a")
            │   └── NumberNode (1)
            ├── AssignNode
            │   ├── MemberAccessNode
            │   │   ├── VarNode ("flags")
            │   │   └── VarNode ("b")
            │   └── NumberNode (0)
            ├── AssignNode
            │   ├── MemberAccessNode
            │   │   ├── VarNode ("flags")
            │   │   └── VarNode ("c")
            │   └── NumberNode (50)
            ├── FuncCallNode
            │   ├── MemberAccessNode
            │   │   ├── VarNode ("Serial")
            │   │   └── VarNode ("print")
            │   └── StringNode ("Flag a: ")
            ├── FuncCallNode
            │   ├── MemberAccessNode
            │   │   ├── VarNode ("Serial")
            │   │   └── VarNode ("println")
            │   └── MemberAccessNode
            │       ├── VarNode ("flags")
            │       └── VarNode ("a")
            ├── FuncCallNode
            │   ├── MemberAccessNode
            │   │   ├── VarNode ("Serial")
            │   │   └── VarNode ("print")
            │   └── StringNode ("Flag c: ")
            └── FuncCallNode
                ├── MemberAccessNode
                │   ├── VarNode ("Serial")
                │   └── VarNode ("println")
                └── MemberAccessNode
                    ├── VarNode ("flags")
                    └── VarNode ("c")
--- End of AST ---

--- Starting Semantic Analysis ---
Define in scope 0: int
Define in scope 0: float
Define in scope 0: void
Define in scope 0: char
Entering global scope.
[FAILURE] TypeError: node.members.forEach is not a function

--- Running: test53.ino ---
[SUCCESS] Parsed successfully.
--- Abstract Syntax Tree ---
└── ProgramNode
    ├── VarDeclNode
    │   ├── TypeNode ("extern int")
    │   └── DeclaratorNode
    │       └── VarNode ("externalVariable")
    ├── FuncDefNode
    │   ├── TypeNode ("void")
    │   ├── DeclaratorNode
    │   │   └── VarNode ("setup")
    │   └── CompoundStmtNode
    │       └── FuncCallNode
    │           ├── MemberAccessNode
    │           │   ├── VarNode ("Serial")
    │           │   └── VarNode ("begin")
    │           └── NumberNode (9600)
    ├── FuncDefNode
    │   ├── TypeNode ("void")
    │   ├── DeclaratorNode
    │   │   └── VarNode ("loop")
    │   └── CompoundStmtNode
    │       ├── VarDeclNode
    │       │   ├── TypeNode ("externalVariable")
    │       │   ├── DeclaratorNode
    │       │   │   └── NoOpNode
    │       │   └── NumberNode (10)
    │       ├── FuncCallNode
    │       │   ├── MemberAccessNode
    │       │   │   ├── VarNode ("Serial")
    │       │   │   └── VarNode ("print")
    │       │   └── StringNode ("External variable value: ")
    │       └── FuncCallNode
    │           ├── MemberAccessNode
    │           │   ├── VarNode ("Serial")
    │           │   └── VarNode ("println")
    │           └── VarNode ("externalVariable")
    └── VarDeclNode
        ├── TypeNode ("int")
        ├── DeclaratorNode
        │   └── VarNode ("externalVariable")
        └── NumberNode (5)
--- End of AST ---

--- Starting Semantic Analysis ---
Define in scope 0: int
Define in scope 0: float
Define in scope 0: void
Define in scope 0: char
Entering global scope.
Lookup: extern int
[FAILURE] SemanticError: Type not found: 'extern int'

--- Running: test54.ino ---
[SUCCESS] Parsed successfully.
--- Abstract Syntax Tree ---
└── ProgramNode
    ├── FuncDefNode
    │   ├── TypeNode ("int")
    │   ├── DeclaratorNode
    │   │   ├── VarNode ("getBigger")
    │   │   ├── ParamNode
    │   │   │   ├── TypeNode ("int")
    │   │   │   └── DeclaratorNode
    │   │   │       └── VarNode ("x")
    │   │   └── ParamNode
    │   │       ├── TypeNode ("int")
    │   │       └── DeclaratorNode
    │   │           └── VarNode ("y")
    │   ├── ParamNode
    │   │   ├── TypeNode ("int")
    │   │   └── DeclaratorNode
    │   │       └── VarNode ("x")
    │   ├── ParamNode
    │   │   ├── TypeNode ("int")
    │   │   └── DeclaratorNode
    │   │       └── VarNode ("y")
    │   └── CompoundStmtNode
    │       └── ReturnNode
    │           └── TernaryOpNode
    │               ├── BinOpNode
    │               │   ├── VarNode ("x")
    │               │   └── VarNode ("y")
    │               ├── VarNode ("x")
    │               └── VarNode ("y")
    ├── FuncDefNode
    │   ├── TypeNode ("void")
    │   ├── DeclaratorNode
    │   │   └── VarNode ("setup")
    │   └── CompoundStmtNode
    │       └── FuncCallNode
    │           ├── MemberAccessNode
    │           │   ├── VarNode ("Serial")
    │           │   └── VarNode ("begin")
    │           └── NumberNode (9600)
    └── FuncDefNode
        ├── TypeNode ("void")
        ├── DeclaratorNode
        │   └── VarNode ("loop")
        └── CompoundStmtNode
            ├── VarDeclNode
            │   ├── TypeNode ("int")
            │   ├── DeclaratorNode
            │   │   └── VarNode ("a")
            │   └── NumberNode (10)
            ├── VarDeclNode
            │   ├── TypeNode ("int")
            │   ├── DeclaratorNode
            │   │   └── VarNode ("result")
            │   └── TernaryOpNode
            │       ├── BinOpNode
            │       │   ├── VarNode ("a")
            │       │   └── VarNode ("b")
            │       ├── FuncCallNode
            │       │   ├── VarNode ("getBigger")
            │       │   ├── VarNode ("a")
            │       │   └── VarNode ("c")
            │       └── BinOpNode
            │           ├── VarNode ("a")
            │           └── VarNode ("b")
            ├── FuncCallNode
            │   ├── MemberAccessNode
            │   │   ├── VarNode ("Serial")
            │   │   └── VarNode ("print")
            │   └── StringNode ("Final result: ")
            └── FuncCallNode
                ├── MemberAccessNode
                │   ├── VarNode ("Serial")
                │   └── VarNode ("println")
                └── VarNode ("result")
--- End of AST ---

--- Starting Semantic Analysis ---
Define in scope 0: int
Define in scope 0: float
Define in scope 0: void
Define in scope 0: char
Entering global scope.
Define in scope 0: getBigger
Entering scope for function: getBigger
Lookup: int
Define in scope 1: x
Lookup: int
Define in scope 1: y
Entering new block scope.
Lookup: x
Lookup: y
Lookup: x
Lookup: y
Leaving block scope.
Leaving scope for function: getBigger
Define in scope 0: setup
Entering scope for function: setup
Entering new block scope.
Lookup: Serial
Lookup: begin
[FAILURE] SemanticError: Identifier not found: 'begin'

--- Running: test55_undeclared_var.ino ---
[SUCCESS] Parsed successfully.
--- Abstract Syntax Tree ---
└── ProgramNode
    ├── FuncDefNode
    │   ├── TypeNode ("void")
    │   ├── DeclaratorNode
    │   │   └── VarNode ("setup")
    │   └── CompoundStmtNode
    │       ├── VarDeclNode
    │       │   ├── TypeNode ("int")
    │       │   ├── DeclaratorNode
    │       │   │   └── VarNode ("x")
    │       │   └── NumberNode (10)
    │       └── VarDeclNode
    │           ├── TypeNode ("x")
    │           ├── DeclaratorNode
    │           │   └── NoOpNode
    │           └── VarNode ("y")
    └── FuncDefNode
        ├── TypeNode ("void")
        ├── DeclaratorNode
        │   └── VarNode ("loop")
        └── CompoundStmtNode
--- End of AST ---

--- Starting Semantic Analysis ---
Define in scope 0: int
Define in scope 0: float
Define in scope 0: void
Define in scope 0: char
Entering global scope.
Define in scope 0: setup
Entering scope for function: setup
Entering new block scope.
Lookup: int
Define in scope 2: x
Lookup: x
Define in scope 2: undefined
Lookup: y
[FAILURE] SemanticError: Identifier not found: 'y'