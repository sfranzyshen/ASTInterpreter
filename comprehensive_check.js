// Comprehensive check for any remaining conversions of numeric values to symbolic names\nconst fs = require('fs');\nconst path = require('path');\n\n// Files to check\nconst filesToCheck = [\n  'ArduinoInterpreter.js',\n  'interpreter_playground.html',\n  'command_stream_validator.js'\n];\n\n// Patterns to look for\nconst patterns = [\n  { name: 'HIGH conversion', pattern: /value === 1.*['\"]HIGH['\"]/ },\n  { name: 'LOW conversion', pattern: /value === 0.*['\"]LOW['\"]/ },\n  { name: 'OUTPUT conversion', pattern: /mode === 1.*['\"]OUTPUT['\"]/ },\n  { name: 'INPUT conversion', pattern: /mode === 0.*['\"]INPUT['\"]/ },\n  { name: 'modeNames object', pattern: /modeNames.*0.*INPUT.*1.*OUTPUT/ }\n];\n\nconsole.log('Checking for any remaining conversions of numeric values to symbolic names...\\n');\n\nfilesToCheck.forEach(file => {\n  const filePath = path.join('/mnt/d/Devel/ArduinoInterpreter', file);\n  if (fs.existsSync(filePath)) {\n    const content = fs.readFileSync(filePath, 'utf8');\n    console.log(`Checking ${file}:`);\n    \n    let foundAny = false;\n    patterns.forEach(({ name, pattern }) => {\n      const matches = content.match(new RegExp(pattern, 'g'));\n      if (matches) {\n        console.log(`  ⚠️  Found ${matches.length} instance(s) of ${name}`);\n        foundAny = true;\n        // Show line numbers\n        const lines = content.split('\\n');\n        lines.forEach((line, index) => {\n          if (pattern.test(line)) {\n            console.log(`    Line ${index + 1}: ${line.trim()}`);\n          }\n        });\n      }\n    });\n    \n    if (!foundAny) {\n      console.log('  ✅ No problematic patterns found');\n    }\n    \n    console.log('');\n  } else {\n    console.log(`File ${file} not found\\n`);\n  }\n});