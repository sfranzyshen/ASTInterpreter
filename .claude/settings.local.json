{
  "permissions": {
    "allow": [
      "Bash(node:*)",
      "Bash(rm:*)",
      "Bash(python3:*)",
      "Bash(grep:*)",
      "WebFetch(domain:localhost)",
      "Bash(sed:*)",
      "Bash(timeout:*)",
      "Bash(pkill:*)",
      "Bash(curl:*)",
      "Bash(mv:*)",
      "Bash(rg:*)",
      "Bash(for file in test_interpreter_examples.js test_interpreter_neopixel.js test_interpreter_old_test.js test_parser_examples.js test_parser_neopixel.js test_parser_old_test.js test_semantic_accuracy.js test_semantic_accuracy_examples.js test_semantic_quick.js)",
      "Bash(do)",
      "Bash(echo:*)",
      "Bash(done)",
      "Read(///**)",
      "Bash(for file in test_parser_old_test.js test_parser_neopixel.js test_semantic_accuracy_examples.js test_semantic_accuracy.js test_semantic_quick.js)",
      "Bash(if [ -f \"$file\" ])",
      "Bash(then)",
      "Bash(fi)",
      "Bash(node:*)",
      "Bash(cmake:*)",
      "Bash(make:*)",
      "Bash(./basic_interpreter_example)",
      "Bash(./test_cross_platform_validation)",
      "Bash(timeout:*)",
      "Bash(g++:*)",
      "Bash(./simple_test)",
      "Bash(grep:*)",
      "Bash(gdb:*)",
      "Bash(xxd:*)",
      "Bash(time timeout:*)",
      "Bash(./build/test_cross_platform_validation)",
      "Bash(/dev/null)",
      "Bash(sed:*)",
      "Bash(./debug_simple_command_stream)",
      "Bash(gemini:*)",
      "Bash(./build/basic_interpreter_example)",
      "Bash(./basic_interpreter_example:*)",
      "Bash(./build/basic_interpreter_example:*)",
      "Bash(./test_cpp_direct:*)",
      "Bash(./test_simple_ast:*)",
      "Read(/mnt/d/Devel/**)",
      "Bash(ln:*)",
      "Bash(printf \"%x\\n\" 0x50545341)",
      "Bash(printf \"As bytes: \")",
      "Bash(./test_cross_platform_validation:*)",
      "Bash(./test_magic_number:*)",
      "Bash(for:*)",
      "Bash(do echo \"Testing $file:\")",
      "Bash(break)",
      "Bash(./test_interpreter_fixes)",
      "Bash(./test_state_machine_fix)",
      "Bash(./test_user_function_params)",
      "Bash(./test_range_based_for)",
      "Bash(./test_array_struct_access:*)",
      "Bash(do [ ! -f \"test_data/example_$i.ast\" ])",
      "Bash(./build/test_cross_platform_validation:*)",
      "Read(//**)",
      "Bash(./test_variable_init)",
      "Bash(./test_ternary_cpp:*)",
      "Bash(./test_simple_ternary_cpp:*)",
      "Bash(./test_complete_ternary_cpp:*)",
      "Bash(./test_types_cpp)",
      "Bash(./test_vardecl_cpp:*)",
      "Bash(./test_data_model)",
      "Bash(./test_enhanced_member_access)",
      "Bash(./test_integrated_simple)",
      "Bash(./test_library_registry)",
      "Bash(./test_library_integration)",
      "Bash(./test_direct_validation)",
      "Bash(find:*)",
      "Bash(./debug_cpp_offsets)",
      "Bash(printf:*)",
      "Bash(./debug_magic_number)",
      "Bash(cat:*)",
      "Bash(./build/debug_command_comparison:*)",
      "Bash(./debug_command_comparison)",
      "Bash(./test_structured_commands)",
      "Bash(./test_structured_batch)",
      "Bash(./test_validation_sample)",
      "Bash(./test_comprehensive_similarity)",
      "Bash(./simple_trace_test)",
      "Bash(./quick_similarity_test)",
      "Bash(jq:*)",
      "Bash(chmod:*)",
      "Bash(tree:*)",
      "Bash(./test_interpreter_integration)",
      "Bash(time node:*)",
      "Bash(./focused_bareminimum_analysis)",
      "Bash(BashOutput)",
      "Bash(./test_interpreter_integration --help)",
      "Bash(nm:*)",
      "Bash(./debug_bareminimum)",
      "Bash(kill:*)",
      "Bash(wait)",
      "Bash(./debug_bareminimum_fixed)",
      "Bash(./test_flexible_command)",
      "Bash(cp:*)",
      "Bash(./test_bareminimum_flexible)",
      "Bash(./chess_endgame_demo)",
      "Bash(./test_cpp_state_machine)",
      "Bash(./test_cross_platform_compactast:*)",
      "Bash(./debug_ast_structure)",
      "Bash(./simple_ast_diagnostic)",
      "Bash(./debug_function_body_execution)",
      "Bash(./diagnostic_compare_detailed)",
      "Bash(./single_test_compare:*)"
    ],
    "deny": [],
    "ask": [],
    "defaultMode": "acceptEdits"
  },
  "hooks": {
    "Stop": [
      {
        "matcher": "",
        "hooks": [
          {
            "type": "command",
            "command": "aplay chime.wav"
          }
        ]
      }
    ],
    "SubagentStop": [
      {
        "matcher": "",
        "hooks": [
          {
            "type": "command",
            "command": "aplay chime.wav"
          }
        ]
      }
    ],
    "Notification": [
      {
        "matcher": "",
        "hooks": [
          {
            "type": "command",
            "command": "aplay boing_x.wav"
          }
        ]
      }
    ]
  }
}