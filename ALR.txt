Arduino Language Reference

Control Structure:

break
continue
do...while
else
for
goto
if
return
switch...case
while

Constants:

HIGH
LOW
LED_BUILTIN
true
false

Data Types:

array
bool
boolean
byte
char
double
float
int
long
short
size_t
string
String()
unsigned char
unsigned int
unsigned long
void
word

Qualifiers:

const
scope
static
volatile

pin modes:

INPUT (0)
OUTPUT (1)
INPUT_PULLUP (2)
INPUT_PULLDOWN (3)
OUTPUT_OPENDRAIN (4)

Commands:

Digital I/O:

int digitalRead(int pin)
void digitalWrite(int pin, int state)
void pinMode(int pin, int mode)

Analog I/O:

int analogRead(int pin)
void analogReadResolution(int resolution)
void analogReference(int reference)
void analogWrite(int pin, int value)
void analogWriteResolution(int resolution)

Advanced I/O:

void tone(int pin, int frequency, long duration)
void noTone(int pin)
long pulseIn(int pin, int state, long timeout)
long pulseInLong(int pin, int state, long timeout)
int shiftIn(int pin, int clockPin, int bitOrder)
void shiftOut(int pin, int clockPin, int bitOrder, byte value)

Time:

void delay(long milliseconds)
void delayMicroseconds(int microseconds)
long millis()
long micros()

Math:

int abs(int value)
int constrain(int value, int min, int max)
long map(long val, long min, long max, long newMin, long newMax)
int max(int val1, int val2)
int min(int val1, int val2)
double pow(double base, double exponent)
int sq(int value)
double sqrt(double value)
cos(double angle)
sin(double angle)
tan(double angle)

Characters:

boolean isAlpha(char c)
boolean isAlphaNumeric(char c)
boolean isAscii(char c)
boolean isControl(char c)
boolean isDigit(char c)
boolean isGraph(char c)
boolean isHexadecimalDigit(char c)
boolean isLowerCase(char c)
boolean isPrintable(char c)
boolean isPunct(char c)
boolean isSpace(char c)
boolean isUpperCase(char c)
boolean isWhitespace(char c)

Random Numbers:

int random()
void randomSeed(unsigned long seed)

Bits and Bytes:

boolean bit(int value, int bitNumber)
void bitClear(int &value, int bit)
boolean bitRead(int value, int bitNumber)
void bitSet(int &value, int bit)
void bitWrite(int &value, int bit, int bitValue)
byte highByte(int value)
byte lowByte(int value)

External Interrupts:

void attachInterrupt(int pin, void (*function)(void), int mode)
void detachInterrupt(int pin)

Interrupts:

void interrupts()
void noInterrupts()

Serial:

if(Serial)
int available()
int availableForWrite()
void begin(unsigned long baudrate)
void end()
int find(char *target)
int findUntil(char *target, char *terminate)
void flush()
float parseFloat()
int parseInt()
int peek()
size_t print()
size_t println()
int read()
int readBytes(char *buffer, size_t length)
int readBytesUntil(char terminator, char *buffer, size_t length)
String readString()
String readStringUntil(char terminator)
void setTimeout(unsigned long timeout)
size_t write(uint8_t)
void serialEvent()

Stream:

int available()
int read()
void flush()
int find(char *target)
int findUntil(char *target, char *terminate)
int peek()
int readBytes(char *buffer, int length)
int readBytesUntil(char terminator, char *buffer, int length)
String readString()
String readStringUntil(char terminator)
int parseInt()
float parseFloat()
void setTimeout(unsigned long timeout)

SPI:

SPISettings(uint32_t clock, uint8_t bitOrder, uint8_t dataMode)
void begin()
void beginTransaction(SPISettings settings)
void endTransaction()
void end()
void setBitOrder(uint8_t bitOrder)
void setClockDivider(uint8_t divider)
void setDataMode(uint8_t dataMode)
byte transfer(byte value)
void usingInterrupt(int interruptNumber)

Wire:

void begin()
void end()
int requestFrom(int address, int quantity)
void beginTransmission(int address)
int endTransmission()
size_t write(uint8_t data)
int available()
int read()
void setClock(uint32_t frequency)
void onReceive(void (*function)(int))
void onRequest(void (*function)(void))
void setWireTimeout(uint32_t timeout)
void clearWireTimeoutFlag()
bool getWireTimeoutFlag()

Operators and Punctuation:

Arithmetic Operators:
+ (addition)
- (subtraction)
* (multiplication)
/ (division)
% (modulo)
++ (increment)
-- (decrement)

Assignment Operators:
= (assignment)
+= (addition assignment)
-= (subtraction assignment)
*= (multiplication assignment)
/= (division assignment)
%= (modulo assignment)
&= (bitwise AND assignment)
|= (bitwise OR assignment)
^= (bitwise XOR assignment)
<<= (bitwise left shift assignment)
>>= (bitwise right shift assignment)

Comparison Operators:
== (equal to)
!= (not equal to)
< (less than)
> (greater than)
<= (less than or equal to)
>= (greater than or equal to)

Logical Operators:
&& (logical AND)
|| (logical OR)
! (logical NOT)

Bitwise Operators:
& (bitwise AND)
| (bitwise OR)
^ (bitwise XOR)
~ (bitwise NOT)
<< (bitwise left shift)
>> (bitwise right shift)

Punctuation:
; (semicolon)
, (comma)
. (dot, member access)
( ) (parentheses)
{ } (braces)
[ ] (brackets)